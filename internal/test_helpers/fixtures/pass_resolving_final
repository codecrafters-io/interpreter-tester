Debug = true

[33m[stage-4] [0m[94mRunning tests for Stage #4: de8[0m
[33m[stage-4] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-4] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-4] [test-1.lox] [0m// This variable is used in the function `f` below.
[33m[stage-4] [test-1.lox] [0mvar variable = "global";
[33m[stage-4] [test-1.lox] [0m
[33m[stage-4] [test-1.lox] [0m{
[33m[stage-4] [test-1.lox] [0m  fun f() {
[33m[stage-4] [test-1.lox] [0m    print variable;
[33m[stage-4] [test-1.lox] [0m  }
[33m[stage-4] [test-1.lox] [0m
[33m[stage-4] [test-1.lox] [0m  f(); // this should print "global"
[33m[stage-4] [test-1.lox] [0m
[33m[stage-4] [test-1.lox] [0m  // This variable declaration shouldn't affect the usage in `f` above.
[33m[stage-4] [test-1.lox] [0m  var variable = "local";
[33m[stage-4] [test-1.lox] [0m
[33m[stage-4] [test-1.lox] [0m  f(); // this should still print "global"
[33m[stage-4] [test-1.lox] [0m}
[33m[stage-4] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mglobal
[33m[your_program] [0mglobal
[33m[stage-4] [test-1] [0m[92mâœ“ 2 line(s) match on stdout[0m
[33m[stage-4] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-4] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-4] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-4] [test-2.lox] [0m// This function is used in the function `f` below.
[33m[stage-4] [test-2.lox] [0mfun global() {
[33m[stage-4] [test-2.lox] [0m  print "global";
[33m[stage-4] [test-2.lox] [0m}
[33m[stage-4] [test-2.lox] [0m
[33m[stage-4] [test-2.lox] [0m{
[33m[stage-4] [test-2.lox] [0m  fun f() {
[33m[stage-4] [test-2.lox] [0m    global();
[33m[stage-4] [test-2.lox] [0m  }
[33m[stage-4] [test-2.lox] [0m
[33m[stage-4] [test-2.lox] [0m  f(); // this should print "global"
[33m[stage-4] [test-2.lox] [0m
[33m[stage-4] [test-2.lox] [0m  // This function declaration shouldn't affect the usage in `f` above.
[33m[stage-4] [test-2.lox] [0m  fun global() {
[33m[stage-4] [test-2.lox] [0m    print "local";
[33m[stage-4] [test-2.lox] [0m  }
[33m[stage-4] [test-2.lox] [0m
[33m[stage-4] [test-2.lox] [0m  f(); // this should also print "global"
[33m[stage-4] [test-2.lox] [0m}
[33m[stage-4] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mglobal
[33m[your_program] [0mglobal
[33m[stage-4] [test-2] [0m[92mâœ“ 2 line(s) match on stdout[0m
[33m[stage-4] [test-2] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-4] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-4] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-4] [test-3.lox] [0mvar x = "global";
[33m[stage-4] [test-3.lox] [0m
[33m[stage-4] [test-3.lox] [0mfun outer() {
[33m[stage-4] [test-3.lox] [0m  var x = "outer";
[33m[stage-4] [test-3.lox] [0m
[33m[stage-4] [test-3.lox] [0m  fun middle() {
[33m[stage-4] [test-3.lox] [0m    // The `inner` function should capture the variable from the closest outer
[33m[stage-4] [test-3.lox] [0m    // scope, which is the `outer` function's scope.
[33m[stage-4] [test-3.lox] [0m    fun inner() {
[33m[stage-4] [test-3.lox] [0m      print x; // Should capture "outer", not "global"
[33m[stage-4] [test-3.lox] [0m    }
[33m[stage-4] [test-3.lox] [0m
[33m[stage-4] [test-3.lox] [0m    inner(); // Should print "outer"
[33m[stage-4] [test-3.lox] [0m
[33m[stage-4] [test-3.lox] [0m    // This variable declaration shouldn't affect the usage in `inner` above.
[33m[stage-4] [test-3.lox] [0m    var x = "middle";
[33m[stage-4] [test-3.lox] [0m
[33m[stage-4] [test-3.lox] [0m    inner(); // Should still print "outer"
[33m[stage-4] [test-3.lox] [0m  }
[33m[stage-4] [test-3.lox] [0m
[33m[stage-4] [test-3.lox] [0m  middle();
[33m[stage-4] [test-3.lox] [0m}
[33m[stage-4] [test-3.lox] [0m
[33m[stage-4] [test-3.lox] [0mouter();
[33m[stage-4] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mouter
[33m[your_program] [0mouter
[33m[stage-4] [test-3] [0m[92mâœ“ 2 line(s) match on stdout[0m
[33m[stage-4] [test-3] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-4] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-4] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-4] [test-4.lox] [0mvar count = 0;
[33m[stage-4] [test-4.lox] [0m
[33m[stage-4] [test-4.lox] [0m{
[33m[stage-4] [test-4.lox] [0m  // The `counter` function should use the `count` variable from the
[33m[stage-4] [test-4.lox] [0m  // global scope.
[33m[stage-4] [test-4.lox] [0m  fun makeCounter() {
[33m[stage-4] [test-4.lox] [0m    fun counter() {
[33m[stage-4] [test-4.lox] [0m      // This should increment the `count` variable from the global scope.
[33m[stage-4] [test-4.lox] [0m      count = count + 1;
[33m[stage-4] [test-4.lox] [0m      print count;
[33m[stage-4] [test-4.lox] [0m    }
[33m[stage-4] [test-4.lox] [0m    return counter;
[33m[stage-4] [test-4.lox] [0m  }
[33m[stage-4] [test-4.lox] [0m
[33m[stage-4] [test-4.lox] [0m  var counter1 = makeCounter();
[33m[stage-4] [test-4.lox] [0m  counter1(); // Should print 1
[33m[stage-4] [test-4.lox] [0m  counter1(); // Should print 2
[33m[stage-4] [test-4.lox] [0m
[33m[stage-4] [test-4.lox] [0m  // This variable declaration shouldn't affect our counter.
[33m[stage-4] [test-4.lox] [0m  var count = 0;
[33m[stage-4] [test-4.lox] [0m
[33m[stage-4] [test-4.lox] [0m  counter1(); // Should print 3
[33m[stage-4] [test-4.lox] [0m}
[33m[stage-4] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m1
[33m[your_program] [0m2
[33m[your_program] [0m3
[33m[stage-4] [test-4] [0m[92mâœ“ 3 line(s) match on stdout[0m
[33m[stage-4] [test-4] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-4] [0m[92mTest passed.[0m

[33m[stage-3] [0m[94mRunning tests for Stage #3: pt7[0m
[33m[stage-3] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-3] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-3] [test-1.lox] [0m// First declaration of variable 'a' in global scope
[33m[stage-3] [test-1.lox] [0mvar a = "value";
[33m[stage-3] [test-1.lox] [0m
[33m[stage-3] [test-1.lox] [0m// Redeclaring 'a' with its own value should be allowed in global scope
[33m[stage-3] [test-1.lox] [0mvar a = a;
[33m[stage-3] [test-1.lox] [0mprint a; // this should print "value"
[33m[stage-3] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mvalue
[33m[stage-3] [test-1] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-3] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-3] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-3] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-3] [test-2.lox] [0m// Declare outer variable 'a' in global scope
[33m[stage-3] [test-2.lox] [0mvar a = "outer";
[33m[stage-3] [test-2.lox] [0m
[33m[stage-3] [test-2.lox] [0m{
[33m[stage-3] [test-2.lox] [0m  // Attempting to declare local variable'a' initialized with itself
[33m[stage-3] [test-2.lox] [0m  var a = a; // This should be a compile error
[33m[stage-3] [test-2.lox] [0m}
[33m[stage-3] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 6] Error at 'a': Can't read local variable in its own initializer.
[33m[stage-3] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-3] [test-2] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-3] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-3] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-3] [test-3.lox] [0m// Helper function that simply returns its argument
[33m[stage-3] [test-3.lox] [0mfun returnArg(arg) {
[33m[stage-3] [test-3.lox] [0m  return arg;
[33m[stage-3] [test-3.lox] [0m}
[33m[stage-3] [test-3.lox] [0m
[33m[stage-3] [test-3.lox] [0m// Declare global variable 'b'
[33m[stage-3] [test-3.lox] [0mvar b = "global";
[33m[stage-3] [test-3.lox] [0m
[33m[stage-3] [test-3.lox] [0m{
[33m[stage-3] [test-3.lox] [0m  // Local variable declaration
[33m[stage-3] [test-3.lox] [0m  var a = "first";
[33m[stage-3] [test-3.lox] [0m
[33m[stage-3] [test-3.lox] [0m  // Attempting to initialize local variable 'b' using local variable 'b'
[33m[stage-3] [test-3.lox] [0m  // through a function call
[33m[stage-3] [test-3.lox] [0m  var b = returnArg(b); // This should be a compile error
[33m[stage-3] [test-3.lox] [0m  print b;
[33m[stage-3] [test-3.lox] [0m}
[33m[stage-3] [test-3.lox] [0m
[33m[stage-3] [test-3.lox] [0mvar b = b + " updated";
[33m[stage-3] [test-3.lox] [0mprint b;
[33m[stage-3] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 15] Error at 'b': Can't read local variable in its own initializer.
[33m[stage-3] [test-3] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-3] [test-3] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-3] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-3] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-3] [test-4.lox] [0mfun outer() {
[33m[stage-3] [test-4.lox] [0m  // Declare variable 'a' in outer function scope
[33m[stage-3] [test-4.lox] [0m  var a = "outer";
[33m[stage-3] [test-4.lox] [0m
[33m[stage-3] [test-4.lox] [0m  // Inner function with its own scope
[33m[stage-3] [test-4.lox] [0m  fun inner() {
[33m[stage-3] [test-4.lox] [0m    // Attempting to declare local 'a' initialized with itself
[33m[stage-3] [test-4.lox] [0m    var a = a; // This should be a compile error
[33m[stage-3] [test-4.lox] [0m    print a;
[33m[stage-3] [test-4.lox] [0m  }
[33m[stage-3] [test-4.lox] [0m
[33m[stage-3] [test-4.lox] [0m  inner();
[33m[stage-3] [test-4.lox] [0m}
[33m[stage-3] [test-4.lox] [0m
[33m[stage-3] [test-4.lox] [0mouter();
[33m[stage-3] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 8] Error at 'a': Can't read local variable in its own initializer.
[33m[stage-3] [test-4] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-3] [test-4] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-3] [0m[92mTest passed.[0m

[33m[stage-2] [0m[94mRunning tests for Stage #2: pz7[0m
[33m[stage-2] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-2] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-2] [test-1.lox] [0m{
[33m[stage-2] [test-1.lox] [0m  var a = "value";
[33m[stage-2] [test-1.lox] [0m
[33m[stage-2] [test-1.lox] [0m  // Attempting to redeclare 'a' in the same scope
[33m[stage-2] [test-1.lox] [0m  var a = "other"; // This should be a compile error
[33m[stage-2] [test-1.lox] [0m}
[33m[stage-2] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 5] Error at 'a': Already a variable with this name in this scope.
[33m[stage-2] [test-1] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-2] [test-1] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-2] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-2] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-2] [test-2.lox] [0m// Function parameters are considered variables in the function's scope
[33m[stage-2] [test-2.lox] [0mfun foo(a) {
[33m[stage-2] [test-2.lox] [0m
[33m[stage-2] [test-2.lox] [0m  // Attempting to declare a variable with same name as parameter
[33m[stage-2] [test-2.lox] [0m  var a; // This should be a compile error
[33m[stage-2] [test-2.lox] [0m}
[33m[stage-2] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 5] Error at 'a': Already a variable with this name in this scope.
[33m[stage-2] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-2] [test-2] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-2] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-2] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-2] [test-3.lox] [0m// Function parameters must have unique names
[33m[stage-2] [test-3.lox] [0mfun foo(arg, arg) { // This should be a compile error
[33m[stage-2] [test-3.lox] [0m
[33m[stage-2] [test-3.lox] [0m  // Function body is irrelevant as the error occurs in parameter list
[33m[stage-2] [test-3.lox] [0m  "body";
[33m[stage-2] [test-3.lox] [0m}
[33m[stage-2] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 2] Error at 'arg': Already a variable with this name in this scope.
[33m[stage-2] [test-3] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-2] [test-3] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-2] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-2] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-2] [test-4.lox] [0mvar a = "1";
[33m[stage-2] [test-4.lox] [0mprint a; // Should print 1
[33m[stage-2] [test-4.lox] [0m
[33m[stage-2] [test-4.lox] [0mvar a;
[33m[stage-2] [test-4.lox] [0mprint a; // Should print nil
[33m[stage-2] [test-4.lox] [0m
[33m[stage-2] [test-4.lox] [0mvar a = "2";
[33m[stage-2] [test-4.lox] [0mprint a; // Should print 2
[33m[stage-2] [test-4.lox] [0m
[33m[stage-2] [test-4.lox] [0m{
[33m[stage-2] [test-4.lox] [0m  // First declaration in local scope
[33m[stage-2] [test-4.lox] [0m  var a = "1";
[33m[stage-2] [test-4.lox] [0m
[33m[stage-2] [test-4.lox] [0m  // Attempting to redeclare in local scope
[33m[stage-2] [test-4.lox] [0m  var a = "2"; // This should be a compile error
[33m[stage-2] [test-4.lox] [0m  print a;
[33m[stage-2] [test-4.lox] [0m}
[33m[stage-2] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 15] Error at 'a': Already a variable with this name in this scope.
[33m[stage-2] [test-4] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-2] [test-4] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-2] [0m[92mTest passed.[0m

[33m[stage-1] [0m[94mRunning tests for Stage #1: eh3[0m
[33m[stage-1] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-1] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-1] [test-1.lox] [0mfun foo() {
[33m[stage-1] [test-1.lox] [0m  // Return statements are allowed within function scope
[33m[stage-1] [test-1.lox] [0m  return "at function scope is ok";
[33m[stage-1] [test-1.lox] [0m}
[33m[stage-1] [test-1.lox] [0m
[33m[stage-1] [test-1.lox] [0m// Return statements are not allowed at the top-level<|SPACE|>return; // This should be a compile error
[33m[stage-1] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 7] Error at 'return': Can't return from top-level code.
[33m[stage-1] [test-1] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-1] [test-1] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-1] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-1] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-1] [test-2.lox] [0mfun foo() {
[33m[stage-1] [test-2.lox] [0m  if (true) {
[33m[stage-1] [test-2.lox] [0m    return "early return";
[33m[stage-1] [test-2.lox] [0m  }
[33m[stage-1] [test-2.lox] [0m
[33m[stage-1] [test-2.lox] [0m  for (var i = 0; i < 10; i = i + 1) {
[33m[stage-1] [test-2.lox] [0m    return "loop return";
[33m[stage-1] [test-2.lox] [0m  }
[33m[stage-1] [test-2.lox] [0m}
[33m[stage-1] [test-2.lox] [0m
[33m[stage-1] [test-2.lox] [0mif (true) {
[33m[stage-1] [test-2.lox] [0m  return "conditional return"; // This should be a compile error
[33m[stage-1] [test-2.lox] [0m}
[33m[stage-1] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 12] Error at 'return': Can't return from top-level code.
[33m[stage-1] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-1] [test-2] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-1] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-1] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-1] [test-3.lox] [0m{
[33m[stage-1] [test-3.lox] [0m  // Return statements are not allowed in top-level blocks
[33m[stage-1] [test-3.lox] [0m  return "not allowed in a block either"; // This should be a compile error
[33m[stage-1] [test-3.lox] [0m}
[33m[stage-1] [test-3.lox] [0m
[33m[stage-1] [test-3.lox] [0mfun allowed() {
[33m[stage-1] [test-3.lox] [0m  if (true) {
[33m[stage-1] [test-3.lox] [0m    return "this is fine";
[33m[stage-1] [test-3.lox] [0m  }
[33m[stage-1] [test-3.lox] [0m  return;
[33m[stage-1] [test-3.lox] [0m}
[33m[stage-1] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 3] Error at 'return': Can't return from top-level code.
[33m[stage-1] [test-3] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-1] [test-3] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-1] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-1] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-1] [test-4.lox] [0mfun outer() {
[33m[stage-1] [test-4.lox] [0m  fun inner() {
[33m[stage-1] [test-4.lox] [0m    return "ok";
[33m[stage-1] [test-4.lox] [0m  }
[33m[stage-1] [test-4.lox] [0m
[33m[stage-1] [test-4.lox] [0m  return "also ok";
[33m[stage-1] [test-4.lox] [0m}
[33m[stage-1] [test-4.lox] [0m
[33m[stage-1] [test-4.lox] [0mif (true) {
[33m[stage-1] [test-4.lox] [0m  fun nested() {
[33m[stage-1] [test-4.lox] [0m    return;
[33m[stage-1] [test-4.lox] [0m  }
[33m[stage-1] [test-4.lox] [0m
[33m[stage-1] [test-4.lox] [0m  // Return statements are not allowed outside of functions
[33m[stage-1] [test-4.lox] [0m  return "not ok"; // This should be a compile error
[33m[stage-1] [test-4.lox] [0m}
[33m[stage-1] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 15] Error at 'return': Can't return from top-level code.
[33m[stage-1] [test-4] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-1] [test-4] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-1] [0m[92mTest passed.[0m
