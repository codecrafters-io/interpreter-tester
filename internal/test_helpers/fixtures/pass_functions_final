Debug = true

[33m[stage-3] [0m[94mRunning tests for Stage #3: f1[0m
[33m[stage-3] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-3] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-3] [test-1] [0m[33m[test.lox][0m 
[33m[stage-3] [test-1] [0m[33m[test.lox][0m print clock() + 23;
[33m[stage-3] [test-1] [0m[33m[test.lox][0m 
[33m[stage-3] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m1.731407969834E9
[33m[stage-3] [test-1] [0m[92mâœ“ 1731407969.834000[0m
[33m[stage-3] [test-1] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-3] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-3] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-3] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-3] [test-2] [0m[33m[test.lox][0m 
[33m[stage-3] [test-2] [0m[33m[test.lox][0m print clock() / 1000;
[33m[stage-3] [test-2] [0m[33m[test.lox][0m 
[33m[stage-3] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m1731407.946909
[33m[stage-3] [test-2] [0m[92mâœ“ 1731407.946909[0m
[33m[stage-3] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-3] [test-2] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-3] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-3] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-3] [test-3] [0m[33m[test.lox][0m var startTime = clock();
[33m[stage-3] [test-3] [0m[33m[test.lox][0m var timeoutSeconds = 2;
[33m[stage-3] [test-3] [0m[33m[test.lox][0m 
[33m[stage-3] [test-3] [0m[33m[test.lox][0m // Check if less than 2 seconds have elapsed
[33m[stage-3] [test-3] [0m[33m[test.lox][0m if ((clock() >= startTime) and (clock() <= (startTime + timeoutSeconds))) {
[33m[stage-3] [test-3] [0m[33m[test.lox][0m   print "Operation in progress...";
[33m[stage-3] [test-3] [0m[33m[test.lox][0m } else {
[33m[stage-3] [test-3] [0m[33m[test.lox][0m   print "Operation timed out!";
[33m[stage-3] [test-3] [0m[33m[test.lox][0m }
[33m[stage-3] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mOperation in progress...
[33m[stage-3] [test-3] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-3] [test-3] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-3] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-3] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-3] [test-4] [0m[33m[test.lox][0m // Store the start time
[33m[stage-3] [test-4] [0m[33m[test.lox][0m var startTime = clock();
[33m[stage-3] [test-4] [0m[33m[test.lox][0m var totalDuration = 3; // 3 seconds countdown
[33m[stage-3] [test-4] [0m[33m[test.lox][0m var lastCheck = startTime;
[33m[stage-3] [test-4] [0m[33m[test.lox][0m var completed = false;
[33m[stage-3] [test-4] [0m[33m[test.lox][0m 
[33m[stage-3] [test-4] [0m[33m[test.lox][0m while (!completed) {
[33m[stage-3] [test-4] [0m[33m[test.lox][0m   var currentTime = clock();
[33m[stage-3] [test-4] [0m[33m[test.lox][0m   var elapsedTime = currentTime - startTime;
[33m[stage-3] [test-4] [0m[33m[test.lox][0m   var remainingTime = totalDuration - elapsedTime;
[33m[stage-3] [test-4] [0m[33m[test.lox][0m 
[33m[stage-3] [test-4] [0m[33m[test.lox][0m   // Update progress every second
[33m[stage-3] [test-4] [0m[33m[test.lox][0m   if (currentTime >= lastCheck + 1) {
[33m[stage-3] [test-4] [0m[33m[test.lox][0m     if (remainingTime >= 2) {
[33m[stage-3] [test-4] [0m[33m[test.lox][0m       print "Plenty of time remaining: ";
[33m[stage-3] [test-4] [0m[33m[test.lox][0m       print remainingTime;
[33m[stage-3] [test-4] [0m[33m[test.lox][0m     } else if (remainingTime >= 1) {
[33m[stage-3] [test-4] [0m[33m[test.lox][0m       print "Getting closer: ";
[33m[stage-3] [test-4] [0m[33m[test.lox][0m       print remainingTime;
[33m[stage-3] [test-4] [0m[33m[test.lox][0m     } else if (remainingTime > 0) {
[33m[stage-3] [test-4] [0m[33m[test.lox][0m       print "Almost there: ";
[33m[stage-3] [test-4] [0m[33m[test.lox][0m       print remainingTime;
[33m[stage-3] [test-4] [0m[33m[test.lox][0m     }
[33m[stage-3] [test-4] [0m[33m[test.lox][0m     lastCheck = currentTime;
[33m[stage-3] [test-4] [0m[33m[test.lox][0m   }
[33m[stage-3] [test-4] [0m[33m[test.lox][0m 
[33m[stage-3] [test-4] [0m[33m[test.lox][0m   // Check for completion
[33m[stage-3] [test-4] [0m[33m[test.lox][0m   if (elapsedTime >= totalDuration) {
[33m[stage-3] [test-4] [0m[33m[test.lox][0m     completed = true;
[33m[stage-3] [test-4] [0m[33m[test.lox][0m     print "Countdown complete!";
[33m[stage-3] [test-4] [0m[33m[test.lox][0m   } else if (elapsedTime < 0) {
[33m[stage-3] [test-4] [0m[33m[test.lox][0m     // Handle clock overflow or system time changes
[33m[stage-3] [test-4] [0m[33m[test.lox][0m     print "Time error detected!";
[33m[stage-3] [test-4] [0m[33m[test.lox][0m     completed = true;
[33m[stage-3] [test-4] [0m[33m[test.lox][0m   }
[33m[stage-3] [test-4] [0m[33m[test.lox][0m }
[33m[stage-3] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mPlenty of time remaining: 
[33m[your_program] [0m2
[33m[your_program] [0mGetting closer: 
[33m[your_program] [0m1
[33m[your_program] [0mCountdown complete!
[33m[stage-3] [test-4] [0m[92mâœ“ 5 line(s) match on stdout[0m
[33m[stage-3] [test-4] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-3] [0m[92mTest passed.[0m

[33m[stage-2] [0m[94mRunning tests for Stage #2: f2[0m
[33m[stage-2] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-2] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-2] [test-1] [0m[33m[test.lox][0m // This function, when invoked should print 55
[33m[stage-2] [test-1] [0m[33m[test.lox][0m fun hello() { print 55; }
[33m[stage-2] [test-1] [0m[33m[test.lox][0m hello();
[33m[stage-2] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m55
[33m[stage-2] [test-1] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-2] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-2] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-2] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-2] [test-2] [0m[33m[test.lox][0m // This function, when invoked should not return or print anything
[33m[stage-2] [test-2] [0m[33m[test.lox][0m fun f() {}
[33m[stage-2] [test-2] [0m[33m[test.lox][0m f();
[33m[stage-2] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[stage-2] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-2] [test-2] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-2] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-2] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-2] [test-3] [0m[33m[test.lox][0m // This program should print <fn foo>
[33m[stage-2] [test-3] [0m[33m[test.lox][0m fun foo() {}
[33m[stage-2] [test-3] [0m[33m[test.lox][0m print foo;
[33m[stage-2] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m<fn foo>
[33m[stage-2] [test-3] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-2] [test-3] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-2] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-2] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-2] [test-4] [0m[33m[test.lox][0m // This program demonstrates the use of recursive functions to determine if a number is even or odd.
[33m[stage-2] [test-4] [0m[33m[test.lox][0m // This is a classic example of mutual recursion.
[33m[stage-2] [test-4] [0m[33m[test.lox][0m fun isEven(n) {
[33m[stage-2] [test-4] [0m[33m[test.lox][0m   if (n == 0) return true;
[33m[stage-2] [test-4] [0m[33m[test.lox][0m   return isOdd(n - 1);
[33m[stage-2] [test-4] [0m[33m[test.lox][0m }
[33m[stage-2] [test-4] [0m[33m[test.lox][0m 
[33m[stage-2] [test-4] [0m[33m[test.lox][0m fun isOdd(n) {
[33m[stage-2] [test-4] [0m[33m[test.lox][0m   if (n == 0) return false;
[33m[stage-2] [test-4] [0m[33m[test.lox][0m   return isEven(n - 1);
[33m[stage-2] [test-4] [0m[33m[test.lox][0m }
[33m[stage-2] [test-4] [0m[33m[test.lox][0m 
[33m[stage-2] [test-4] [0m[33m[test.lox][0m print isEven(19);
[33m[stage-2] [test-4] [0m[33m[test.lox][0m print isOdd(43);
[33m[stage-2] [test-4] [0m[33m[test.lox][0m 
[33m[stage-2] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mfalse
[33m[your_program] [0mtrue
[33m[stage-2] [test-4] [0m[92mâœ“ 2 line(s) match on stdout[0m
[33m[stage-2] [test-4] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-2] [0m[92mTest passed.[0m

[33m[stage-1] [0m[94mRunning tests for Stage #1: f3[0m
[33m[stage-1] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-1] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-1] [test-1] [0m[33m[test.lox][0m // This is a simple function that takes one argument and prints it
[33m[stage-1] [test-1] [0m[33m[test.lox][0m fun f1(a) { print a; }
[33m[stage-1] [test-1] [0m[33m[test.lox][0m f1(45);
[33m[stage-1] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m45
[33m[stage-1] [test-1] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-1] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-1] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-1] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-1] [test-2] [0m[33m[test.lox][0m // This function takes three arguments and prints their sum
[33m[stage-1] [test-2] [0m[33m[test.lox][0m fun f3(a, b, c) { print a + b + c; }
[33m[stage-1] [test-2] [0m[33m[test.lox][0m f3(67, 67, 67);
[33m[stage-1] [test-2] [0m[33m[test.lox][0m 
[33m[stage-1] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m201
[33m[stage-1] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-1] [test-2] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-1] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-1] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-1] [test-3] [0m[33m[test.lox][0m // This function takes eight arguments and prints their sum
[33m[stage-1] [test-3] [0m[33m[test.lox][0m fun f8(a, b, c, d, e, f, g, h) { print a - b + c * d + e - f + g - h; }
[33m[stage-1] [test-3] [0m[33m[test.lox][0m f8(29, 29, 29, 29, 29, 29, 29, 29);
[33m[stage-1] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m841
[33m[stage-1] [test-3] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-1] [test-3] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-1] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-1] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-1] [test-4] [0m[33m[test.lox][0m // This function takes two arguments and prints the grade based on the score and bonus
[33m[stage-1] [test-4] [0m[33m[test.lox][0m fun calculateGrade(score, bonus) {
[33m[stage-1] [test-4] [0m[33m[test.lox][0m   var finalScore = score + bonus;
[33m[stage-1] [test-4] [0m[33m[test.lox][0m 
[33m[stage-1] [test-4] [0m[33m[test.lox][0m   if (finalScore >= 90) {
[33m[stage-1] [test-4] [0m[33m[test.lox][0m     print "A";
[33m[stage-1] [test-4] [0m[33m[test.lox][0m   } else if (finalScore >= 80) {
[33m[stage-1] [test-4] [0m[33m[test.lox][0m     print "B";
[33m[stage-1] [test-4] [0m[33m[test.lox][0m   } else if (finalScore >= 70) {
[33m[stage-1] [test-4] [0m[33m[test.lox][0m     print "C";
[33m[stage-1] [test-4] [0m[33m[test.lox][0m   } else if (finalScore >= 60) {
[33m[stage-1] [test-4] [0m[33m[test.lox][0m     print "D";
[33m[stage-1] [test-4] [0m[33m[test.lox][0m   } else {
[33m[stage-1] [test-4] [0m[33m[test.lox][0m     print "F";
[33m[stage-1] [test-4] [0m[33m[test.lox][0m   }
[33m[stage-1] [test-4] [0m[33m[test.lox][0m }
[33m[stage-1] [test-4] [0m[33m[test.lox][0m 
[33m[stage-1] [test-4] [0m[33m[test.lox][0m var score = 64;
[33m[stage-1] [test-4] [0m[33m[test.lox][0m var bonus = 3;
[33m[stage-1] [test-4] [0m[33m[test.lox][0m print "Grade for given score is: ";
[33m[stage-1] [test-4] [0m[33m[test.lox][0m calculateGrade(score, bonus);
[33m[stage-1] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mGrade for given score is: 
[33m[your_program] [0mD
[33m[stage-1] [test-4] [0m[92mâœ“ 2 line(s) match on stdout[0m
[33m[stage-1] [test-4] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-1] [0m[92mTest passed.[0m
