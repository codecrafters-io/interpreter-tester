Debug = true

[33m[stage-8] [0m[94mRunning tests for Stage #8: cl1[0m
[33m[stage-8] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-8] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-8] [test-1] [0m[33m[test.lox][0m class Spaceship {}
[33m[stage-8] [test-1] [0m[33m[test.lox][0m print Spaceship;
[33m[stage-8] [test-1] [0m[33m[test.lox][0m 
[33m[stage-8] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mSpaceship
[33m[stage-8] [test-1] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-8] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-8] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-8] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-8] [test-2] [0m[33m[test.lox][0m // Multiple class declarations
[33m[stage-8] [test-2] [0m[33m[test.lox][0m class Robot {}
[33m[stage-8] [test-2] [0m[33m[test.lox][0m class Wizard {}
[33m[stage-8] [test-2] [0m[33m[test.lox][0m print Robot;
[33m[stage-8] [test-2] [0m[33m[test.lox][0m print Wizard;
[33m[stage-8] [test-2] [0m[33m[test.lox][0m print "Both classes successfully printed";
[33m[stage-8] [test-2] [0m[33m[test.lox][0m 
[33m[stage-8] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mRobot
[33m[your_program] [0mWizard
[33m[your_program] [0mBoth classes successfully printed
[33m[stage-8] [test-2] [0m[92mâœ“ 3 line(s) match on stdout[0m
[33m[stage-8] [test-2] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-8] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-8] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-8] [test-3] [0m[33m[test.lox][0m {
[33m[stage-8] [test-3] [0m[33m[test.lox][0m   class Dinosaur {}
[33m[stage-8] [test-3] [0m[33m[test.lox][0m   print "Inside block: Dinosaur exists";
[33m[stage-8] [test-3] [0m[33m[test.lox][0m   print Dinosaur;
[33m[stage-8] [test-3] [0m[33m[test.lox][0m }
[33m[stage-8] [test-3] [0m[33m[test.lox][0m print "Accessing out-of-scope class:";
[33m[stage-8] [test-3] [0m[33m[test.lox][0m print Dinosaur;  // Should cause runtime error
[33m[stage-8] [test-3] [0m[33m[test.lox][0m 
[33m[stage-8] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mInside block: Dinosaur exists
[33m[your_program] [0mDinosaur
[33m[your_program] [0mAccessing out-of-scope class:
[33m[your_program] [0mUndefined variable 'Dinosaur'.
[33m[your_program] [0m[line 7]
[33m[stage-8] [test-3] [0m[92mâœ“ 3 line(s) match on stdout[0m
[33m[stage-8] [test-3] [0m[92mâœ“ Received exit code 70.[0m
[33m[stage-8] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-8] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-8] [test-4] [0m[33m[test.lox][0m // Class declaration inside function
[33m[stage-8] [test-4] [0m[33m[test.lox][0m fun foo() {
[33m[stage-8] [test-4] [0m[33m[test.lox][0m   class Superhero {}
[33m[stage-8] [test-4] [0m[33m[test.lox][0m   print "Class declared inside function";
[33m[stage-8] [test-4] [0m[33m[test.lox][0m   print Superhero;
[33m[stage-8] [test-4] [0m[33m[test.lox][0m }
[33m[stage-8] [test-4] [0m[33m[test.lox][0m 
[33m[stage-8] [test-4] [0m[33m[test.lox][0m foo();
[33m[stage-8] [test-4] [0m[33m[test.lox][0m print "Function called successfully";
[33m[stage-8] [test-4] [0m[33m[test.lox][0m 
[33m[stage-8] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mClass declared inside function
[33m[your_program] [0mSuperhero
[33m[your_program] [0mFunction called successfully
[33m[stage-8] [test-4] [0m[92mâœ“ 3 line(s) match on stdout[0m
[33m[stage-8] [test-4] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-8] [0m[92mTest passed.[0m

[33m[stage-7] [0m[94mRunning tests for Stage #7: cl2[0m
[33m[stage-7] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-7] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-7] [test-1] [0m[33m[test.lox][0m // Basic class instantiation with conditional
[33m[stage-7] [test-1] [0m[33m[test.lox][0m class Spaceship {}
[33m[stage-7] [test-1] [0m[33m[test.lox][0m var falcon = Spaceship();
[33m[stage-7] [test-1] [0m[33m[test.lox][0m print falcon;
[33m[stage-7] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mSpaceship instance
[33m[stage-7] [test-1] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-7] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-7] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-7] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-7] [test-2] [0m[33m[test.lox][0m // Multiple instances with a counter
[33m[stage-7] [test-2] [0m[33m[test.lox][0m class Robot {}
[33m[stage-7] [test-2] [0m[33m[test.lox][0m var r1 = Robot();
[33m[stage-7] [test-2] [0m[33m[test.lox][0m var r2 = Robot();
[33m[stage-7] [test-2] [0m[33m[test.lox][0m 
[33m[stage-7] [test-2] [0m[33m[test.lox][0m print "Created multiple robots:";
[33m[stage-7] [test-2] [0m[33m[test.lox][0m print r1;
[33m[stage-7] [test-2] [0m[33m[test.lox][0m print r2;
[33m[stage-7] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mCreated multiple robots:
[33m[your_program] [0mRobot instance
[33m[your_program] [0mRobot instance
[33m[stage-7] [test-2] [0m[92mâœ“ 3 line(s) match on stdout[0m
[33m[stage-7] [test-2] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-7] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-7] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-7] [test-3] [0m[33m[test.lox][0m // Instantiating classes in a function
[33m[stage-7] [test-3] [0m[33m[test.lox][0m class Wizard {}
[33m[stage-7] [test-3] [0m[33m[test.lox][0m class Dragon {}
[33m[stage-7] [test-3] [0m[33m[test.lox][0m 
[33m[stage-7] [test-3] [0m[33m[test.lox][0m fun createCharacters() {
[33m[stage-7] [test-3] [0m[33m[test.lox][0m   var merlin = Wizard();
[33m[stage-7] [test-3] [0m[33m[test.lox][0m   var smaug = Dragon();
[33m[stage-7] [test-3] [0m[33m[test.lox][0m   print "Characters created in fantasy world:";
[33m[stage-7] [test-3] [0m[33m[test.lox][0m   print merlin;
[33m[stage-7] [test-3] [0m[33m[test.lox][0m   print smaug;
[33m[stage-7] [test-3] [0m[33m[test.lox][0m   return merlin;
[33m[stage-7] [test-3] [0m[33m[test.lox][0m }
[33m[stage-7] [test-3] [0m[33m[test.lox][0m 
[33m[stage-7] [test-3] [0m[33m[test.lox][0m var mainCharacter = createCharacters();
[33m[stage-7] [test-3] [0m[33m[test.lox][0m if (mainCharacter) {
[33m[stage-7] [test-3] [0m[33m[test.lox][0m   print "The main character is:";
[33m[stage-7] [test-3] [0m[33m[test.lox][0m   print mainCharacter;
[33m[stage-7] [test-3] [0m[33m[test.lox][0m } else {
[33m[stage-7] [test-3] [0m[33m[test.lox][0m   print "Failed to create a main character.";
[33m[stage-7] [test-3] [0m[33m[test.lox][0m }
[33m[stage-7] [test-3] [0m[33m[test.lox][0m 
[33m[stage-7] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mCharacters created in fantasy world:
[33m[your_program] [0mWizard instance
[33m[your_program] [0mDragon instance
[33m[your_program] [0mThe main character is:
[33m[your_program] [0mWizard instance
[33m[stage-7] [test-3] [0m[92mâœ“ 5 line(s) match on stdout[0m
[33m[stage-7] [test-3] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-7] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-7] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-7] [test-4] [0m[33m[test.lox][0m // Class instantiation with a loop
[33m[stage-7] [test-4] [0m[33m[test.lox][0m class Superhero {}
[33m[stage-7] [test-4] [0m[33m[test.lox][0m 
[33m[stage-7] [test-4] [0m[33m[test.lox][0m var count = 0;
[33m[stage-7] [test-4] [0m[33m[test.lox][0m while (count < 3) {
[33m[stage-7] [test-4] [0m[33m[test.lox][0m   var hero = Superhero();
[33m[stage-7] [test-4] [0m[33m[test.lox][0m   print "Hero created:";
[33m[stage-7] [test-4] [0m[33m[test.lox][0m   print hero;
[33m[stage-7] [test-4] [0m[33m[test.lox][0m   count = count + 1;
[33m[stage-7] [test-4] [0m[33m[test.lox][0m }
[33m[stage-7] [test-4] [0m[33m[test.lox][0m 
[33m[stage-7] [test-4] [0m[33m[test.lox][0m print "All heroes created!";
[33m[stage-7] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mHero created:
[33m[your_program] [0mSuperhero instance
[33m[your_program] [0mHero created:
[33m[your_program] [0mSuperhero instance
[33m[your_program] [0mHero created:
[33m[your_program] [0mSuperhero instance
[33m[your_program] [0mAll heroes created!
[33m[stage-7] [test-4] [0m[92mâœ“ 7 line(s) match on stdout[0m
[33m[stage-7] [test-4] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-7] [0m[92mTest passed.[0m

[33m[stage-6] [0m[94mRunning tests for Stage #6: cl3[0m
[33m[stage-6] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-6] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-6] [test-1] [0m[33m[test.lox][0m // Basic property setting and getting
[33m[stage-6] [test-1] [0m[33m[test.lox][0m class Spaceship {}
[33m[stage-6] [test-1] [0m[33m[test.lox][0m var falcon = Spaceship();
[33m[stage-6] [test-1] [0m[33m[test.lox][0m 
[33m[stage-6] [test-1] [0m[33m[test.lox][0m falcon.name = "Millennium Falcon";
[33m[stage-6] [test-1] [0m[33m[test.lox][0m falcon.speed = 75.5;
[33m[stage-6] [test-1] [0m[33m[test.lox][0m 
[33m[stage-6] [test-1] [0m[33m[test.lox][0m print "Ship details:";
[33m[stage-6] [test-1] [0m[33m[test.lox][0m print falcon.name;
[33m[stage-6] [test-1] [0m[33m[test.lox][0m print falcon.speed;
[33m[stage-6] [test-1] [0m[33m[test.lox][0m 
[33m[stage-6] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mShip details:
[33m[your_program] [0mMillennium Falcon
[33m[your_program] [0m75.5
[33m[stage-6] [test-1] [0m[92mâœ“ 3 line(s) match on stdout[0m
[33m[stage-6] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-6] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-6] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-6] [test-2] [0m[33m[test.lox][0m // Multiple properties and conditional access
[33m[stage-6] [test-2] [0m[33m[test.lox][0m class Robot {}
[33m[stage-6] [test-2] [0m[33m[test.lox][0m var r2d2 = Robot();
[33m[stage-6] [test-2] [0m[33m[test.lox][0m 
[33m[stage-6] [test-2] [0m[33m[test.lox][0m r2d2.model = "Astromech";
[33m[stage-6] [test-2] [0m[33m[test.lox][0m r2d2.operational = false;
[33m[stage-6] [test-2] [0m[33m[test.lox][0m 
[33m[stage-6] [test-2] [0m[33m[test.lox][0m if (r2d2.operational) {
[33m[stage-6] [test-2] [0m[33m[test.lox][0m   print r2d2.model;
[33m[stage-6] [test-2] [0m[33m[test.lox][0m   r2d2.mission = "Navigate hyperspace";
[33m[stage-6] [test-2] [0m[33m[test.lox][0m   print r2d2.mission;
[33m[stage-6] [test-2] [0m[33m[test.lox][0m }
[33m[stage-6] [test-2] [0m[33m[test.lox][0m 
[33m[stage-6] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[stage-6] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-6] [test-2] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-6] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-6] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-6] [test-3] [0m[33m[test.lox][0m // Multiple instances with properties
[33m[stage-6] [test-3] [0m[33m[test.lox][0m class Superhero {}
[33m[stage-6] [test-3] [0m[33m[test.lox][0m var batman = Superhero();
[33m[stage-6] [test-3] [0m[33m[test.lox][0m var superman = Superhero();
[33m[stage-6] [test-3] [0m[33m[test.lox][0m 
[33m[stage-6] [test-3] [0m[33m[test.lox][0m batman.name = "Batman";
[33m[stage-6] [test-3] [0m[33m[test.lox][0m batman.called = 80;
[33m[stage-6] [test-3] [0m[33m[test.lox][0m 
[33m[stage-6] [test-3] [0m[33m[test.lox][0m superman.name = "Superman";
[33m[stage-6] [test-3] [0m[33m[test.lox][0m superman.called = 16;
[33m[stage-6] [test-3] [0m[33m[test.lox][0m 
[33m[stage-6] [test-3] [0m[33m[test.lox][0m print "Times " + superman.name + " was called: ";
[33m[stage-6] [test-3] [0m[33m[test.lox][0m print superman.called;
[33m[stage-6] [test-3] [0m[33m[test.lox][0m print "Times " + batman.name + " was called: ";
[33m[stage-6] [test-3] [0m[33m[test.lox][0m print batman.called;
[33m[stage-6] [test-3] [0m[33m[test.lox][0m 
[33m[stage-6] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mTimes Superman was called: 
[33m[your_program] [0m16
[33m[your_program] [0mTimes Batman was called: 
[33m[your_program] [0m80
[33m[stage-6] [test-3] [0m[92mâœ“ 4 line(s) match on stdout[0m
[33m[stage-6] [test-3] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-6] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-6] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-6] [test-4] [0m[33m[test.lox][0m // Property manipulation in functions
[33m[stage-6] [test-4] [0m[33m[test.lox][0m class Wizard {}
[33m[stage-6] [test-4] [0m[33m[test.lox][0m var gandalf = Wizard();
[33m[stage-6] [test-4] [0m[33m[test.lox][0m 
[33m[stage-6] [test-4] [0m[33m[test.lox][0m gandalf.color = "Grey";
[33m[stage-6] [test-4] [0m[33m[test.lox][0m gandalf.power = nil;
[33m[stage-6] [test-4] [0m[33m[test.lox][0m print gandalf.color;
[33m[stage-6] [test-4] [0m[33m[test.lox][0m 
[33m[stage-6] [test-4] [0m[33m[test.lox][0m fun promote(wizard) {
[33m[stage-6] [test-4] [0m[33m[test.lox][0m   wizard.color = "White";
[33m[stage-6] [test-4] [0m[33m[test.lox][0m   if (false) {
[33m[stage-6] [test-4] [0m[33m[test.lox][0m     wizard.power = 100;
[33m[stage-6] [test-4] [0m[33m[test.lox][0m   } else {
[33m[stage-6] [test-4] [0m[33m[test.lox][0m     wizard.power = 0;
[33m[stage-6] [test-4] [0m[33m[test.lox][0m   }
[33m[stage-6] [test-4] [0m[33m[test.lox][0m }
[33m[stage-6] [test-4] [0m[33m[test.lox][0m 
[33m[stage-6] [test-4] [0m[33m[test.lox][0m promote(gandalf);
[33m[stage-6] [test-4] [0m[33m[test.lox][0m print gandalf.color;
[33m[stage-6] [test-4] [0m[33m[test.lox][0m print gandalf.power;
[33m[stage-6] [test-4] [0m[33m[test.lox][0m 
[33m[stage-6] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mGrey
[33m[your_program] [0mWhite
[33m[your_program] [0m0
[33m[stage-6] [test-4] [0m[92mâœ“ 3 line(s) match on stdout[0m
[33m[stage-6] [test-4] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-6] [0m[92mTest passed.[0m

[33m[stage-5] [0m[94mRunning tests for Stage #5: cl4[0m
[33m[stage-5] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-5] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-5] [test-1] [0m[33m[test.lox][0m class Robot {
[33m[stage-5] [test-1] [0m[33m[test.lox][0m   beep() {
[33m[stage-5] [test-1] [0m[33m[test.lox][0m     print "Beep boop!";
[33m[stage-5] [test-1] [0m[33m[test.lox][0m   }
[33m[stage-5] [test-1] [0m[33m[test.lox][0m }
[33m[stage-5] [test-1] [0m[33m[test.lox][0m 
[33m[stage-5] [test-1] [0m[33m[test.lox][0m var r2d2 = Robot();
[33m[stage-5] [test-1] [0m[33m[test.lox][0m r2d2.beep();
[33m[stage-5] [test-1] [0m[33m[test.lox][0m 
[33m[stage-5] [test-1] [0m[33m[test.lox][0m Robot().beep();
[33m[stage-5] [test-1] [0m[33m[test.lox][0m 
[33m[stage-5] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mBeep boop!
[33m[your_program] [0mBeep boop!
[33m[stage-5] [test-1] [0m[92mâœ“ 2 line(s) match on stdout[0m
[33m[stage-5] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-5] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-5] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-5] [test-2] [0m[33m[test.lox][0m {
[33m[stage-5] [test-2] [0m[33m[test.lox][0m   class Foo {
[33m[stage-5] [test-2] [0m[33m[test.lox][0m     returnSelf() {
[33m[stage-5] [test-2] [0m[33m[test.lox][0m       return Foo;
[33m[stage-5] [test-2] [0m[33m[test.lox][0m     }
[33m[stage-5] [test-2] [0m[33m[test.lox][0m   }
[33m[stage-5] [test-2] [0m[33m[test.lox][0m 
[33m[stage-5] [test-2] [0m[33m[test.lox][0m   print Foo().returnSelf(); // expect: Foo
[33m[stage-5] [test-2] [0m[33m[test.lox][0m }
[33m[stage-5] [test-2] [0m[33m[test.lox][0m 
[33m[stage-5] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mFoo
[33m[stage-5] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-5] [test-2] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-5] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-5] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-5] [test-3] [0m[33m[test.lox][0m class Wizard {
[33m[stage-5] [test-3] [0m[33m[test.lox][0m   castSpell(spell) {
[33m[stage-5] [test-3] [0m[33m[test.lox][0m     print "Casting a magical spell: " + spell;
[33m[stage-5] [test-3] [0m[33m[test.lox][0m   }
[33m[stage-5] [test-3] [0m[33m[test.lox][0m }
[33m[stage-5] [test-3] [0m[33m[test.lox][0m 
[33m[stage-5] [test-3] [0m[33m[test.lox][0m class Dragon {
[33m[stage-5] [test-3] [0m[33m[test.lox][0m   breatheFire(fire, intensity) {
[33m[stage-5] [test-3] [0m[33m[test.lox][0m     print "Breathing " + fire + " with intensity: "
[33m[stage-5] [test-3] [0m[33m[test.lox][0m     + intensity;
[33m[stage-5] [test-3] [0m[33m[test.lox][0m   }
[33m[stage-5] [test-3] [0m[33m[test.lox][0m }
[33m[stage-5] [test-3] [0m[33m[test.lox][0m 
[33m[stage-5] [test-3] [0m[33m[test.lox][0m // Methods on different class instances
[33m[stage-5] [test-3] [0m[33m[test.lox][0m var merlin = Wizard();
[33m[stage-5] [test-3] [0m[33m[test.lox][0m var smaug = Dragon();
[33m[stage-5] [test-3] [0m[33m[test.lox][0m 
[33m[stage-5] [test-3] [0m[33m[test.lox][0m // Conditional method calling
[33m[stage-5] [test-3] [0m[33m[test.lox][0m if (false) {
[33m[stage-5] [test-3] [0m[33m[test.lox][0m   var action = merlin.castSpell;
[33m[stage-5] [test-3] [0m[33m[test.lox][0m   action("Fireball");
[33m[stage-5] [test-3] [0m[33m[test.lox][0m } else {
[33m[stage-5] [test-3] [0m[33m[test.lox][0m   var action = smaug.breatheFire;
[33m[stage-5] [test-3] [0m[33m[test.lox][0m   action("Fire", "100");
[33m[stage-5] [test-3] [0m[33m[test.lox][0m }
[33m[stage-5] [test-3] [0m[33m[test.lox][0m 
[33m[stage-5] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mBreathing Fire with intensity: 100
[33m[stage-5] [test-3] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-5] [test-3] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-5] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-5] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-5] [test-4] [0m[33m[test.lox][0m class Superhero {
[33m[stage-5] [test-4] [0m[33m[test.lox][0m   useSpecialPower() {
[33m[stage-5] [test-4] [0m[33m[test.lox][0m     print "Using power: " + this.specialPower;
[33m[stage-5] [test-4] [0m[33m[test.lox][0m   }
[33m[stage-5] [test-4] [0m[33m[test.lox][0m 
[33m[stage-5] [test-4] [0m[33m[test.lox][0m   hasSpecialPower() {
[33m[stage-5] [test-4] [0m[33m[test.lox][0m     return this.specialPower;
[33m[stage-5] [test-4] [0m[33m[test.lox][0m   }
[33m[stage-5] [test-4] [0m[33m[test.lox][0m 
[33m[stage-5] [test-4] [0m[33m[test.lox][0m   giveSpecialPower(power) {
[33m[stage-5] [test-4] [0m[33m[test.lox][0m     this.specialPower = power;
[33m[stage-5] [test-4] [0m[33m[test.lox][0m   }
[33m[stage-5] [test-4] [0m[33m[test.lox][0m }
[33m[stage-5] [test-4] [0m[33m[test.lox][0m 
[33m[stage-5] [test-4] [0m[33m[test.lox][0m // Methods in functions
[33m[stage-5] [test-4] [0m[33m[test.lox][0m fun performHeroics(hero) {
[33m[stage-5] [test-4] [0m[33m[test.lox][0m   if (hero.hasSpecialPower()) {
[33m[stage-5] [test-4] [0m[33m[test.lox][0m     hero.useSpecialPower();
[33m[stage-5] [test-4] [0m[33m[test.lox][0m   } else {
[33m[stage-5] [test-4] [0m[33m[test.lox][0m     print "No special power available";
[33m[stage-5] [test-4] [0m[33m[test.lox][0m   }
[33m[stage-5] [test-4] [0m[33m[test.lox][0m }
[33m[stage-5] [test-4] [0m[33m[test.lox][0m 
[33m[stage-5] [test-4] [0m[33m[test.lox][0m var superman = Superhero();
[33m[stage-5] [test-4] [0m[33m[test.lox][0m if (false) {
[33m[stage-5] [test-4] [0m[33m[test.lox][0m   superman.giveSpecialPower("Flight");
[33m[stage-5] [test-4] [0m[33m[test.lox][0m } else {
[33m[stage-5] [test-4] [0m[33m[test.lox][0m   superman.giveSpecialPower("Strength");
[33m[stage-5] [test-4] [0m[33m[test.lox][0m }
[33m[stage-5] [test-4] [0m[33m[test.lox][0m 
[33m[stage-5] [test-4] [0m[33m[test.lox][0m performHeroics(superman);
[33m[stage-5] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mUsing power: Strength
[33m[stage-5] [test-4] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-5] [test-4] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-5] [0m[92mTest passed.[0m

[33m[stage-4] [0m[94mRunning tests for Stage #4: cl5[0m
[33m[stage-4] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-4] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-4] [test-1] [0m[33m[test.lox][0m class Spaceship {
[33m[stage-4] [test-1] [0m[33m[test.lox][0m   identify() {
[33m[stage-4] [test-1] [0m[33m[test.lox][0m     print this;
[33m[stage-4] [test-1] [0m[33m[test.lox][0m   }
[33m[stage-4] [test-1] [0m[33m[test.lox][0m }
[33m[stage-4] [test-1] [0m[33m[test.lox][0m 
[33m[stage-4] [test-1] [0m[33m[test.lox][0m Spaceship().identify();
[33m[stage-4] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mSpaceship instance
[33m[stage-4] [test-1] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-4] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-4] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-4] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-4] [test-2] [0m[33m[test.lox][0m class Calculator {
[33m[stage-4] [test-2] [0m[33m[test.lox][0m   add(a, b) {
[33m[stage-4] [test-2] [0m[33m[test.lox][0m     return a + b + this.memory;
[33m[stage-4] [test-2] [0m[33m[test.lox][0m   }
[33m[stage-4] [test-2] [0m[33m[test.lox][0m }
[33m[stage-4] [test-2] [0m[33m[test.lox][0m 
[33m[stage-4] [test-2] [0m[33m[test.lox][0m var calc = Calculator();
[33m[stage-4] [test-2] [0m[33m[test.lox][0m calc.memory = 88;
[33m[stage-4] [test-2] [0m[33m[test.lox][0m print calc.add(54, 1);
[33m[stage-4] [test-2] [0m[33m[test.lox][0m 
[33m[stage-4] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m143
[33m[stage-4] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-4] [test-2] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-4] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-4] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-4] [test-3] [0m[33m[test.lox][0m class Animal {
[33m[stage-4] [test-3] [0m[33m[test.lox][0m   makeSound() {
[33m[stage-4] [test-3] [0m[33m[test.lox][0m     print this.sound;
[33m[stage-4] [test-3] [0m[33m[test.lox][0m   }
[33m[stage-4] [test-3] [0m[33m[test.lox][0m <|SPACE|>  identify() {
[33m[stage-4] [test-3] [0m[33m[test.lox][0m     print this.species;
[33m[stage-4] [test-3] [0m[33m[test.lox][0m   }
[33m[stage-4] [test-3] [0m[33m[test.lox][0m }
[33m[stage-4] [test-3] [0m[33m[test.lox][0m 
[33m[stage-4] [test-3] [0m[33m[test.lox][0m var dog = Animal();
[33m[stage-4] [test-3] [0m[33m[test.lox][0m dog.sound = "Woof";
[33m[stage-4] [test-3] [0m[33m[test.lox][0m dog.species = "Dog";
[33m[stage-4] [test-3] [0m[33m[test.lox][0m 
[33m[stage-4] [test-3] [0m[33m[test.lox][0m var cat = Animal();
[33m[stage-4] [test-3] [0m[33m[test.lox][0m cat.sound = "Meow";
[33m[stage-4] [test-3] [0m[33m[test.lox][0m cat.species = "Cat";
[33m[stage-4] [test-3] [0m[33m[test.lox][0m 
[33m[stage-4] [test-3] [0m[33m[test.lox][0m // Swap methods between instances
[33m[stage-4] [test-3] [0m[33m[test.lox][0m cat.makeSound = dog.makeSound;
[33m[stage-4] [test-3] [0m[33m[test.lox][0m dog.identify = cat.identify;
[33m[stage-4] [test-3] [0m[33m[test.lox][0m 
[33m[stage-4] [test-3] [0m[33m[test.lox][0m cat.makeSound();
[33m[stage-4] [test-3] [0m[33m[test.lox][0m dog.identify();
[33m[stage-4] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mWoof
[33m[your_program] [0mCat
[33m[stage-4] [test-3] [0m[92mâœ“ 2 line(s) match on stdout[0m
[33m[stage-4] [test-3] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-4] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-4] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-4] [test-4] [0m[33m[test.lox][0m class Wizard {
[33m[stage-4] [test-4] [0m[33m[test.lox][0m   getSpellCaster() {
[33m[stage-4] [test-4] [0m[33m[test.lox][0m     fun castSpell() {
[33m[stage-4] [test-4] [0m[33m[test.lox][0m       print this;
[33m[stage-4] [test-4] [0m[33m[test.lox][0m       print "Casting spell as " + this.name;
[33m[stage-4] [test-4] [0m[33m[test.lox][0m     }
[33m[stage-4] [test-4] [0m[33m[test.lox][0m 
[33m[stage-4] [test-4] [0m[33m[test.lox][0m     return castSpell;
[33m[stage-4] [test-4] [0m[33m[test.lox][0m   }
[33m[stage-4] [test-4] [0m[33m[test.lox][0m }
[33m[stage-4] [test-4] [0m[33m[test.lox][0m 
[33m[stage-4] [test-4] [0m[33m[test.lox][0m var wizard = Wizard();
[33m[stage-4] [test-4] [0m[33m[test.lox][0m wizard.name = "Merlin";
[33m[stage-4] [test-4] [0m[33m[test.lox][0m wizard.getSpellCaster()();
[33m[stage-4] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mWizard instance
[33m[your_program] [0mCasting spell as Merlin
[33m[stage-4] [test-4] [0m[92mâœ“ 2 line(s) match on stdout[0m
[33m[stage-4] [test-4] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-4] [0m[92mTest passed.[0m

[33m[stage-3] [0m[94mRunning tests for Stage #3: cl6[0m
[33m[stage-3] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-3] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-3] [test-1] [0m[33m[test.lox][0m print this;
[33m[stage-3] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 1] Error at 'this': Can't use 'this' outside of a class.
[33m[stage-3] [test-1] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-3] [test-1] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-3] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-3] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-3] [test-2] [0m[33m[test.lox][0m fun notAMethod() {
[33m[stage-3] [test-2] [0m[33m[test.lox][0m   print this;
[33m[stage-3] [test-2] [0m[33m[test.lox][0m }
[33m[stage-3] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 2] Error at 'this': Can't use 'this' outside of a class.
[33m[stage-3] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-3] [test-2] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-3] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-3] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-3] [test-3] [0m[33m[test.lox][0m class Person {
[33m[stage-3] [test-3] [0m[33m[test.lox][0m   sayName() {
[33m[stage-3] [test-3] [0m[33m[test.lox][0m     print this();
[33m[stage-3] [test-3] [0m[33m[test.lox][0m   }
[33m[stage-3] [test-3] [0m[33m[test.lox][0m }
[33m[stage-3] [test-3] [0m[33m[test.lox][0m Person().sayName();
[33m[stage-3] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mCan only call functions and classes.
[33m[your_program] [0m[line 3]
[33m[stage-3] [test-3] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-3] [test-3] [0m[92mâœ“ Received exit code 70.[0m
[33m[stage-3] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-3] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-3] [test-4] [0m[33m[test.lox][0m class Confused {
[33m[stage-3] [test-4] [0m[33m[test.lox][0m   method() {
[33m[stage-3] [test-4] [0m[33m[test.lox][0m     fun inner(instance) {
[33m[stage-3] [test-4] [0m[33m[test.lox][0m       var feeling = "confused";
[33m[stage-3] [test-4] [0m[33m[test.lox][0m       print this.feeling;
[33m[stage-3] [test-4] [0m[33m[test.lox][0m     }
[33m[stage-3] [test-4] [0m[33m[test.lox][0m     return inner;
[33m[stage-3] [test-4] [0m[33m[test.lox][0m   }
[33m[stage-3] [test-4] [0m[33m[test.lox][0m }
[33m[stage-3] [test-4] [0m[33m[test.lox][0m 
[33m[stage-3] [test-4] [0m[33m[test.lox][0m var instance = Confused();
[33m[stage-3] [test-4] [0m[33m[test.lox][0m var m = instance.method();
[33m[stage-3] [test-4] [0m[33m[test.lox][0m m(instance);
[33m[stage-3] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mUndefined property 'feeling'.
[33m[your_program] [0m[line 5]
[33m[stage-3] [test-4] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-3] [test-4] [0m[92mâœ“ Received exit code 70.[0m
[33m[stage-3] [0m[92mTest passed.[0m

[33m[stage-2] [0m[94mRunning tests for Stage #2: cl7[0m
[33m[stage-2] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-2] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-2] [test-1] [0m[33m[test.lox][0m class Default {
[33m[stage-2] [test-1] [0m[33m[test.lox][0m   init() {
[33m[stage-2] [test-1] [0m[33m[test.lox][0m     this.x = "baz";
[33m[stage-2] [test-1] [0m[33m[test.lox][0m     this.y = 59;
[33m[stage-2] [test-1] [0m[33m[test.lox][0m   }
[33m[stage-2] [test-1] [0m[33m[test.lox][0m }
[33m[stage-2] [test-1] [0m[33m[test.lox][0m print Default().x;
[33m[stage-2] [test-1] [0m[33m[test.lox][0m print Default().y;
[33m[stage-2] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mbaz
[33m[your_program] [0m59
[33m[stage-2] [test-1] [0m[92mâœ“ 2 line(s) match on stdout[0m
[33m[stage-2] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-2] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-2] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-2] [test-2] [0m[33m[test.lox][0m class Robot {
[33m[stage-2] [test-2] [0m[33m[test.lox][0m   init(model, function) {
[33m[stage-2] [test-2] [0m[33m[test.lox][0m     this.model = model;
[33m[stage-2] [test-2] [0m[33m[test.lox][0m     this.function = function;
[33m[stage-2] [test-2] [0m[33m[test.lox][0m   }
[33m[stage-2] [test-2] [0m[33m[test.lox][0m }
[33m[stage-2] [test-2] [0m[33m[test.lox][0m print Robot("R2-D2", "Astromech").model;
[33m[stage-2] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mR2-D2
[33m[stage-2] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-2] [test-2] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-2] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-2] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-2] [test-3] [0m[33m[test.lox][0m class Counter {
[33m[stage-2] [test-3] [0m[33m[test.lox][0m   init(startValue) {
[33m[stage-2] [test-3] [0m[33m[test.lox][0m     if (startValue < 0) {
[33m[stage-2] [test-3] [0m[33m[test.lox][0m       print "startValue can't be negative";
[33m[stage-2] [test-3] [0m[33m[test.lox][0m       this.count = 0;
[33m[stage-2] [test-3] [0m[33m[test.lox][0m     } else {
[33m[stage-2] [test-3] [0m[33m[test.lox][0m       this.count = startValue;
[33m[stage-2] [test-3] [0m[33m[test.lox][0m     }
[33m[stage-2] [test-3] [0m[33m[test.lox][0m   }
[33m[stage-2] [test-3] [0m[33m[test.lox][0m }
[33m[stage-2] [test-3] [0m[33m[test.lox][0m 
[33m[stage-2] [test-3] [0m[33m[test.lox][0m var instance = Counter(-11);
[33m[stage-2] [test-3] [0m[33m[test.lox][0m print instance.count;
[33m[stage-2] [test-3] [0m[33m[test.lox][0m print instance.init(11).count;
[33m[stage-2] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mstartValue can't be negative
[33m[your_program] [0m0
[33m[your_program] [0m11
[33m[stage-2] [test-3] [0m[92mâœ“ 3 line(s) match on stdout[0m
[33m[stage-2] [test-3] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-2] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-2] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-2] [test-4] [0m[33m[test.lox][0m class Vehicle {
[33m[stage-2] [test-4] [0m[33m[test.lox][0m   init(type) {
[33m[stage-2] [test-4] [0m[33m[test.lox][0m     this.type = type;
[33m[stage-2] [test-4] [0m[33m[test.lox][0m   }
[33m[stage-2] [test-4] [0m[33m[test.lox][0m }
[33m[stage-2] [test-4] [0m[33m[test.lox][0m 
[33m[stage-2] [test-4] [0m[33m[test.lox][0m class Car {
[33m[stage-2] [test-4] [0m[33m[test.lox][0m   init(make, model) {
[33m[stage-2] [test-4] [0m[33m[test.lox][0m     this.make = make;
[33m[stage-2] [test-4] [0m[33m[test.lox][0m     this.model = model;
[33m[stage-2] [test-4] [0m[33m[test.lox][0m     this.wheels = "four";
[33m[stage-2] [test-4] [0m[33m[test.lox][0m   }
[33m[stage-2] [test-4] [0m[33m[test.lox][0m 
[33m[stage-2] [test-4] [0m[33m[test.lox][0m   describe() {
[33m[stage-2] [test-4] [0m[33m[test.lox][0m     print this.make + " " + this.model +
[33m[stage-2] [test-4] [0m[33m[test.lox][0m     " with " + this.wheels + " wheels";
[33m[stage-2] [test-4] [0m[33m[test.lox][0m   }
[33m[stage-2] [test-4] [0m[33m[test.lox][0m }
[33m[stage-2] [test-4] [0m[33m[test.lox][0m 
[33m[stage-2] [test-4] [0m[33m[test.lox][0m var vehicle = Vehicle("Generic");
[33m[stage-2] [test-4] [0m[33m[test.lox][0m print "Generic " + vehicle.type;
[33m[stage-2] [test-4] [0m[33m[test.lox][0m 
[33m[stage-2] [test-4] [0m[33m[test.lox][0m var myCar = Car("Toyota", "Corolla");
[33m[stage-2] [test-4] [0m[33m[test.lox][0m myCar.describe();
[33m[stage-2] [test-4] [0m[33m[test.lox][0m 
[33m[stage-2] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mGeneric Generic
[33m[your_program] [0mToyota Corolla with four wheels
[33m[stage-2] [test-4] [0m[92mâœ“ 2 line(s) match on stdout[0m
[33m[stage-2] [test-4] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-2] [0m[92mTest passed.[0m

[33m[stage-1] [0m[94mRunning tests for Stage #1: cl8[0m
[33m[stage-1] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-1] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-1] [test-1] [0m[33m[test.lox][0m class Person {
[33m[stage-1] [test-1] [0m[33m[test.lox][0m   init() {
[33m[stage-1] [test-1] [0m[33m[test.lox][0m     print "hello";
[33m[stage-1] [test-1] [0m[33m[test.lox][0m     return;
[33m[stage-1] [test-1] [0m[33m[test.lox][0m   }
[33m[stage-1] [test-1] [0m[33m[test.lox][0m }
[33m[stage-1] [test-1] [0m[33m[test.lox][0m 
[33m[stage-1] [test-1] [0m[33m[test.lox][0m Person();
[33m[stage-1] [test-1] [0m[33m[test.lox][0m 
[33m[stage-1] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mhello
[33m[stage-1] [test-1] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-1] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-1] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-1] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-1] [test-2] [0m[33m[test.lox][0m class ThingDefault {
[33m[stage-1] [test-2] [0m[33m[test.lox][0m   init() {
[33m[stage-1] [test-2] [0m[33m[test.lox][0m     this.x = "foo";
[33m[stage-1] [test-2] [0m[33m[test.lox][0m     this.y = 42;
[33m[stage-1] [test-2] [0m[33m[test.lox][0m     return this;
[33m[stage-1] [test-2] [0m[33m[test.lox][0m   }
[33m[stage-1] [test-2] [0m[33m[test.lox][0m }
[33m[stage-1] [test-2] [0m[33m[test.lox][0m var out = ThingDefault();
[33m[stage-1] [test-2] [0m[33m[test.lox][0m print out;
[33m[stage-1] [test-2] [0m[33m[test.lox][0m 
[33m[stage-1] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 5] Error at 'return': Can't return a value from an initializer.
[33m[stage-1] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-1] [test-2] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-1] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-1] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-1] [test-3] [0m[33m[test.lox][0m class Foo {
[33m[stage-1] [test-3] [0m[33m[test.lox][0m   init() {
[33m[stage-1] [test-3] [0m[33m[test.lox][0m     return "something else";
[33m[stage-1] [test-3] [0m[33m[test.lox][0m   }
[33m[stage-1] [test-3] [0m[33m[test.lox][0m }
[33m[stage-1] [test-3] [0m[33m[test.lox][0m 
[33m[stage-1] [test-3] [0m[33m[test.lox][0m Foo();
[33m[stage-1] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 3] Error at 'return': Can't return a value from an initializer.
[33m[stage-1] [test-3] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-1] [test-3] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-1] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-1] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-1] [test-4] [0m[33m[test.lox][0m class Foo {
[33m[stage-1] [test-4] [0m[33m[test.lox][0m   init() {
[33m[stage-1] [test-4] [0m[33m[test.lox][0m     return this.callback();
[33m[stage-1] [test-4] [0m[33m[test.lox][0m   }
[33m[stage-1] [test-4] [0m[33m[test.lox][0m 
[33m[stage-1] [test-4] [0m[33m[test.lox][0m   callback() {
[33m[stage-1] [test-4] [0m[33m[test.lox][0m     return "callback";
[33m[stage-1] [test-4] [0m[33m[test.lox][0m   }
[33m[stage-1] [test-4] [0m[33m[test.lox][0m }
[33m[stage-1] [test-4] [0m[33m[test.lox][0m 
[33m[stage-1] [test-4] [0m[33m[test.lox][0m Foo();
[33m[stage-1] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 3] Error at 'return': Can't return a value from an initializer.
[33m[stage-1] [test-4] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-1] [test-4] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-1] [0m[92mTest passed.[0m
