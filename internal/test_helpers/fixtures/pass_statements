Debug = true

[33m[stage-10] [0m[94mRunning tests for Stage #10: xy1[0m
[33m[stage-10] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-10] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-10] [test-1.lox] [0m// This program prints a boolean
[33m[stage-10] [test-1.lox] [0mprint false;
[33m[stage-10] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mfalse
[33m[stage-10] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-10] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[stage-10] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-10] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-10] [test-2.lox] [0m// This program prints the result of the concatenation of three strings
[33m[stage-10] [test-2.lox] [0mprint "quz" + "hello" + "baz";
[33m[stage-10] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mquzhellobaz
[33m[stage-10] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-10] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[stage-10] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-10] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-10] [test-3.lox] [0m// This program prints the result of an arithmetic expression
[33m[stage-10] [test-3.lox] [0mprint (92 * 2 + 96 * 2) / (2);
[33m[stage-10] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m188
[33m[stage-10] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-10] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[stage-10] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-10] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-10] [test-4.lox] [0m// Print statements expect an expression
[33m[stage-10] [test-4.lox] [0m// So, this program leads to a compilation error
[33m[stage-10] [test-4.lox] [0mprint;
[33m[stage-10] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 3] Error at ';': Expect expression.
[33m[stage-10] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-10] [test-4] [0m[92m✓ Received exit code 65.[0m
[33m[stage-10] [0m[92mTest passed.[0m

[33m[stage-9] [0m[94mRunning tests for Stage #9: oe4[0m
[33m[stage-9] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-9] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-9] [test-1.lox] [0m// This program prints the result of arithmetic operations involving strings and integers
[33m[stage-9] [test-1.lox] [0mprint "hello" + "foo" + "world";
[33m[stage-9] [test-1.lox] [0mprint 34 - 90;
[33m[stage-9] [test-1.lox] [0mprint "world" == "quz";
[33m[stage-9] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mhellofooworld
[33m[your_program] [0m-56
[33m[your_program] [0mfalse
[33m[stage-9] [test-1] [0m[92m✓ 3 line(s) match on stdout[0m
[33m[stage-9] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[stage-9] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-9] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-9] [test-2.lox] [0m// This program tests the syntax of multiple statements in a single line
[33m[stage-9] [test-2.lox] [0mprint "bar"; print true;
[33m[stage-9] [test-2.lox] [0mprint true;
[33m[stage-9] [test-2.lox] [0mprint "world"; print 28;
[33m[stage-9] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mbar
[33m[your_program] [0mtrue
[33m[your_program] [0mtrue
[33m[your_program] [0mworld
[33m[your_program] [0m28
[33m[stage-9] [test-2] [0m[92m✓ 5 line(s) match on stdout[0m
[33m[stage-9] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[stage-9] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-9] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-9] [test-3.lox] [0m// This program tests that leading whitespace are ignored while executing
[33m[stage-9] [test-3.lox] [0mprint 17;
[33m[stage-9] [test-3.lox] [0m    print 17 + 81;
[33m[stage-9] [test-3.lox] [0m        print 17 + 81 + 52;
[33m[stage-9] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m17
[33m[your_program] [0m98
[33m[your_program] [0m150
[33m[stage-9] [test-3] [0m[92m✓ 3 line(s) match on stdout[0m
[33m[stage-9] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[stage-9] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-9] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-9] [test-4.lox] [0m// This program prints the result of a comparison operation
[33m[stage-9] [test-4.lox] [0m// It also tests multi-line strings and non-ASCII characters
[33m[stage-9] [test-4.lox] [0mprint true != true;
[33m[stage-9] [test-4.lox] [0m
[33m[stage-9] [test-4.lox] [0mprint "44
[33m[stage-9] [test-4.lox] [0m84
[33m[stage-9] [test-4.lox] [0m70
[33m[stage-9] [test-4.lox] [0m";
[33m[stage-9] [test-4.lox] [0m
[33m[stage-9] [test-4.lox] [0mprint "There should be an empty line above this.";
[33m[stage-9] [test-4.lox] [0m
[33m[stage-9] [test-4.lox] [0mprint "(" + "" + ")";
[33m[stage-9] [test-4.lox] [0m
[33m[stage-9] [test-4.lox] [0mprint "non-ascii: ॐ";
[33m[stage-9] [test-4.lox] [0m
[33m[stage-9] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mfalse
[33m[your_program] [0m44
[33m[your_program] [0m84
[33m[your_program] [0m70
[33m[your_program] [0m
[33m[your_program] [0mThere should be an empty line above this.
[33m[your_program] [0m()
[33m[your_program] [0mnon-ascii: ॐ
[33m[stage-9] [test-4] [0m[92m✓ 8 line(s) match on stdout[0m
[33m[stage-9] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[stage-9] [0m[92mTest passed.[0m

[33m[stage-8] [0m[94mRunning tests for Stage #8: fi3[0m
[33m[stage-8] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-8] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-8] [test-1.lox] [0m// This program tests that statements are executed even if they don't have any side effects
[33m[stage-8] [test-1.lox] [0m// It also tests complex arithmetic expressions and string concatenation
[33m[stage-8] [test-1.lox] [0m(74 + 46 - 10) > (42 - 74) * 2;
[33m[stage-8] [test-1.lox] [0mprint !false;
[33m[stage-8] [test-1.lox] [0m"quz" + "world" + "bar" + "foo" == "quzworldbarfoo";
[33m[stage-8] [test-1.lox] [0mprint !false;
[33m[stage-8] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mtrue
[33m[your_program] [0mtrue
[33m[stage-8] [test-1] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[stage-8] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[stage-8] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-8] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-8] [test-2.lox] [0m// This program tests statements that don't have any side effects
[33m[stage-8] [test-2.lox] [0m53 - 31 >= -90 * 2 / 90 + 27;
[33m[stage-8] [test-2.lox] [0mfalse == false;
[33m[stage-8] [test-2.lox] [0m("world" == "hello") == ("quz" != "baz");
[33m[stage-8] [test-2.lox] [0mprint false;
[33m[stage-8] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mfalse
[33m[stage-8] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-8] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[stage-8] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-8] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-8] [test-3.lox] [0m// This program tests that the + operator is only supported when both operands are numbers or both are strings
[33m[stage-8] [test-3.lox] [0mprint "the expression below is invalid";
[33m[stage-8] [test-3.lox] [0m62 + "quz";
[33m[stage-8] [test-3.lox] [0mprint "this should not be printed";
[33m[stage-8] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mthe expression below is invalid
[33m[your_program] [0mOperands must be two numbers or two strings.
[33m[your_program] [0m[line 3]
[33m[stage-8] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-8] [test-3] [0m[92m✓ Received exit code 70.[0m
[33m[stage-8] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-8] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-8] [test-4.lox] [0m// This program tests that the * operator is only supported when both operands are numbers
[33m[stage-8] [test-4.lox] [0mprint "50" + "hello";
[33m[stage-8] [test-4.lox] [0mprint false * (97 + 23);
[33m[stage-8] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m50hello
[33m[your_program] [0mOperands must be numbers.
[33m[your_program] [0m[line 3]
[33m[stage-8] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-8] [test-4] [0m[92m✓ Received exit code 70.[0m
[33m[stage-8] [0m[92mTest passed.[0m

[33m[stage-7] [0m[94mRunning tests for Stage #7: yg2[0m
[33m[stage-7] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-7] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-7] [test-1.lox] [0m// This program tests that variables are initialized to the correct value
[33m[stage-7] [test-1.lox] [0mvar baz = 10;
[33m[stage-7] [test-1.lox] [0mprint baz;
[33m[stage-7] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m10
[33m[stage-7] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-7] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[stage-7] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-7] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-7] [test-2.lox] [0m// This program declares multiple variables and<|SPACE|>// prints the result of arithmetic operations on them
[33m[stage-7] [test-2.lox] [0mvar foo = 17;
[33m[stage-7] [test-2.lox] [0mvar bar = 17;
[33m[stage-7] [test-2.lox] [0mprint foo + bar;
[33m[stage-7] [test-2.lox] [0mvar quz = 17;
[33m[stage-7] [test-2.lox] [0mprint foo + bar + quz;
[33m[stage-7] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m34
[33m[your_program] [0m51
[33m[stage-7] [test-2] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[stage-7] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[stage-7] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-7] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-7] [test-3.lox] [0m// This program assigns the result of an arithmetic expression to a variable
[33m[stage-7] [test-3.lox] [0m// Then it prints the value of the variable
[33m[stage-7] [test-3.lox] [0mvar quz = (8 * (68 + 68)) / 4 + 68;
[33m[stage-7] [test-3.lox] [0mprint quz;
[33m[stage-7] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m340
[33m[stage-7] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-7] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[stage-7] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-7] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-7] [test-4.lox] [0m// This program declares variables and performs operations on them
[33m[stage-7] [test-4.lox] [0m// Finally it prints the result of the operations
[33m[stage-7] [test-4.lox] [0mvar bar = 66;
[33m[stage-7] [test-4.lox] [0mvar foo = bar;
[33m[stage-7] [test-4.lox] [0mprint foo + bar;
[33m[stage-7] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m132
[33m[stage-7] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-7] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[stage-7] [0m[92mTest passed.[0m

[33m[stage-6] [0m[94mRunning tests for Stage #6: sv7[0m
[33m[stage-6] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-6] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-6] [test-1.lox] [0m// This program tries to access a variable before it is declared
[33m[stage-6] [test-1.lox] [0m// It leads to a runtime error
[33m[stage-6] [test-1.lox] [0mprint 45;
[33m[stage-6] [test-1.lox] [0mprint x;
[33m[stage-6] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m45
[33m[your_program] [0mUndefined variable 'x'.
[33m[your_program] [0m[line 4]
[33m[stage-6] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-6] [test-1] [0m[92m✓ Received exit code 70.[0m
[33m[stage-6] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-6] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-6] [test-2.lox] [0m// This program tries to access a variable before it is declared
[33m[stage-6] [test-2.lox] [0m// It leads to a runtime error
[33m[stage-6] [test-2.lox] [0mvar world = 16;
[33m[stage-6] [test-2.lox] [0mprint baz;
[33m[stage-6] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mUndefined variable 'baz'.
[33m[your_program] [0m[line 4]
[33m[stage-6] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-6] [test-2] [0m[92m✓ Received exit code 70.[0m
[33m[stage-6] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-6] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-6] [test-3.lox] [0m// This program tries to access a variable before it is declared
[33m[stage-6] [test-3.lox] [0m// It leads to a runtime error
[33m[stage-6] [test-3.lox] [0mvar world = 47;
[33m[stage-6] [test-3.lox] [0mvar result = (world + foo) / bar;
[33m[stage-6] [test-3.lox] [0mprint result;
[33m[stage-6] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mUndefined variable 'foo'.
[33m[your_program] [0m[line 4]
[33m[stage-6] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-6] [test-3] [0m[92m✓ Received exit code 70.[0m
[33m[stage-6] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-6] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-6] [test-4.lox] [0m// This program tries to access a variable before it is declared
[33m[stage-6] [test-4.lox] [0m// It leads to a runtime error
[33m[stage-6] [test-4.lox] [0mvar quz = 88;
[33m[stage-6] [test-4.lox] [0mvar hello = 96;
[33m[stage-6] [test-4.lox] [0mvar foo = 36;
[33m[stage-6] [test-4.lox] [0mprint quz + hello + foo + bar; print 53;
[33m[stage-6] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mUndefined variable 'bar'.
[33m[your_program] [0m[line 6]
[33m[stage-6] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-6] [test-4] [0m[92m✓ Received exit code 70.[0m
[33m[stage-6] [0m[92mTest passed.[0m

[33m[stage-5] [0m[94mRunning tests for Stage #5: bc1[0m
[33m[stage-5] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-5] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-5] [test-1.lox] [0m// This program declares a variable but doesn't initialize it
[33m[stage-5] [test-1.lox] [0m// It prints the variable's value, which should be nil
[33m[stage-5] [test-1.lox] [0mvar hello;
[33m[stage-5] [test-1.lox] [0mprint hello;
[33m[stage-5] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mnil
[33m[stage-5] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-5] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[stage-5] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-5] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-5] [test-2.lox] [0m// This program declares a variable but doesn't initialize it
[33m[stage-5] [test-2.lox] [0m// It prints the variable's value
[33m[stage-5] [test-2.lox] [0mvar foo = "baz";
[33m[stage-5] [test-2.lox] [0mvar bar;
[33m[stage-5] [test-2.lox] [0mprint bar;
[33m[stage-5] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mnil
[33m[stage-5] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-5] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[stage-5] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-5] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-5] [test-3.lox] [0m// This program declares a variable but doesn't initialize it
[33m[stage-5] [test-3.lox] [0m// It prints the variable's value
[33m[stage-5] [test-3.lox] [0mvar quz = 25;
[33m[stage-5] [test-3.lox] [0mvar hello;
[33m[stage-5] [test-3.lox] [0mvar foo;
[33m[stage-5] [test-3.lox] [0mprint hello;
[33m[stage-5] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mnil
[33m[stage-5] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-5] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[stage-5] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-5] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-5] [test-4.lox] [0m// This program declares a variable but doesn't initialize it
[33m[stage-5] [test-4.lox] [0m// It prints the variable's value
[33m[stage-5] [test-4.lox] [0mvar quz = 95 + 71 * 16;
[33m[stage-5] [test-4.lox] [0mprint quz;
[33m[stage-5] [test-4.lox] [0mvar baz = 71 * 16;
[33m[stage-5] [test-4.lox] [0mprint quz + baz;
[33m[stage-5] [test-4.lox] [0mvar foo;
[33m[stage-5] [test-4.lox] [0mprint foo;
[33m[stage-5] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m1231
[33m[your_program] [0m2367
[33m[your_program] [0mnil
[33m[stage-5] [test-4] [0m[92m✓ 3 line(s) match on stdout[0m
[33m[stage-5] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[stage-5] [0m[92mTest passed.[0m

[33m[stage-4] [0m[94mRunning tests for Stage #4: dw9[0m
[33m[stage-4] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-4] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-4] [test-1.lox] [0m// This program declares a variable and prints its value
[33m[stage-4] [test-1.lox] [0m// It then redeclares the variable and prints its value again
[33m[stage-4] [test-1.lox] [0mvar baz = "before";
[33m[stage-4] [test-1.lox] [0mprint baz;
[33m[stage-4] [test-1.lox] [0mvar baz = "after";
[33m[stage-4] [test-1.lox] [0mprint baz;
[33m[stage-4] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mbefore
[33m[your_program] [0mafter
[33m[stage-4] [test-1] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[stage-4] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[stage-4] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-4] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-4] [test-2.lox] [0m// This program declares a variable and prints its value
[33m[stage-4] [test-2.lox] [0m// It also uses a previously declared variable's value to initialize a new variable
[33m[stage-4] [test-2.lox] [0mvar world = "after";
[33m[stage-4] [test-2.lox] [0mvar world = "before";
[33m[stage-4] [test-2.lox] [0mvar world = world;
[33m[stage-4] [test-2.lox] [0mprint world;
[33m[stage-4] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mbefore
[33m[stage-4] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-4] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[stage-4] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-4] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-4] [test-3.lox] [0m// This program declares and initializes multiple variables and prints their values
[33m[stage-4] [test-3.lox] [0mvar bar = 2;
[33m[stage-4] [test-3.lox] [0mprint bar;
[33m[stage-4] [test-3.lox] [0mvar bar = 3;
[33m[stage-4] [test-3.lox] [0mprint bar;
[33m[stage-4] [test-3.lox] [0mvar hello = 5;
[33m[stage-4] [test-3.lox] [0mprint hello;
[33m[stage-4] [test-3.lox] [0mvar bar = hello;
[33m[stage-4] [test-3.lox] [0mprint bar;
[33m[stage-4] [test-3.lox] [0m
[33m[stage-4] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m2
[33m[your_program] [0m3
[33m[your_program] [0m5
[33m[your_program] [0m5
[33m[stage-4] [test-3] [0m[92m✓ 4 line(s) match on stdout[0m
[33m[stage-4] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[stage-4] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-4] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-4] [test-4.lox] [0m// This program declares a variable and initializes it with the value of another variable
[33m[stage-4] [test-4.lox] [0m// But as the variable is not declared before it is used it leads to a runtime error
[33m[stage-4] [test-4.lox] [0mvar hello = baz;
[33m[stage-4] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mUndefined variable 'baz'.
[33m[your_program] [0m[line 3]
[33m[stage-4] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-4] [test-4] [0m[92m✓ Received exit code 70.[0m
[33m[stage-4] [0m[92mTest passed.[0m

[33m[stage-3] [0m[94mRunning tests for Stage #3: pl3[0m
[33m[stage-3] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-3] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-3] [test-1.lox] [0m// This program tests that the assignment operator returns the value that was assigned
[33m[stage-3] [test-1.lox] [0m// And prints the value of the variable after each assignment
[33m[stage-3] [test-1.lox] [0mvar baz;
[33m[stage-3] [test-1.lox] [0mbaz = 1;
[33m[stage-3] [test-1.lox] [0mprint baz;
[33m[stage-3] [test-1.lox] [0mprint baz = 2;
[33m[stage-3] [test-1.lox] [0mprint baz;
[33m[stage-3] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m1
[33m[your_program] [0m2
[33m[your_program] [0m2
[33m[stage-3] [test-1] [0m[92m✓ 3 line(s) match on stdout[0m
[33m[stage-3] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[stage-3] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-3] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-3] [test-2.lox] [0m// This program tests that the assignment operator works on any declared variable
[33m[stage-3] [test-2.lox] [0mvar bar = 87;
[33m[stage-3] [test-2.lox] [0mvar world = 87;
[33m[stage-3] [test-2.lox] [0mworld = bar;
[33m[stage-3] [test-2.lox] [0mbar = world;
[33m[stage-3] [test-2.lox] [0mprint bar + world;
[33m[stage-3] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m174
[33m[stage-3] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-3] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[stage-3] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-3] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-3] [test-3.lox] [0m// This program tests that the assignment operator returns the value that was assigned
[33m[stage-3] [test-3.lox] [0m// So, it can be used multiple times in a single statement
[33m[stage-3] [test-3.lox] [0mvar foo;
[33m[stage-3] [test-3.lox] [0mvar baz;
[33m[stage-3] [test-3.lox] [0m
[33m[stage-3] [test-3.lox] [0mfoo = baz = 50 + 13 * 62;
[33m[stage-3] [test-3.lox] [0mprint foo;
[33m[stage-3] [test-3.lox] [0mprint baz;
[33m[stage-3] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m856
[33m[your_program] [0m856
[33m[stage-3] [test-3] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[stage-3] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[stage-3] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-3] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-3] [test-4.lox] [0m// This program tests that the assignment operator returns the value that was assigned
[33m[stage-3] [test-4.lox] [0m// So, it can be used multiple times in a single statement
[33m[stage-3] [test-4.lox] [0mvar bar = 93;
[33m[stage-3] [test-4.lox] [0mvar quz;
[33m[stage-3] [test-4.lox] [0mvar foo;
[33m[stage-3] [test-4.lox] [0m
[33m[stage-3] [test-4.lox] [0mbar = quz = foo = bar * 2;
[33m[stage-3] [test-4.lox] [0mprint bar;
[33m[stage-3] [test-4.lox] [0mprint quz;
[33m[stage-3] [test-4.lox] [0mprint quz;
[33m[stage-3] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m186
[33m[your_program] [0m186
[33m[your_program] [0m186
[33m[stage-3] [test-4] [0m[92m✓ 3 line(s) match on stdout[0m
[33m[stage-3] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[stage-3] [0m[92mTest passed.[0m

[33m[stage-2] [0m[94mRunning tests for Stage #2: vr5[0m
[33m[stage-2] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-2] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-2] [test-1.lox] [0m// This program tests that curly braces can be used to group multiple statements into blocks
[33m[stage-2] [test-1.lox] [0m{
[33m[stage-2] [test-1.lox] [0m    var hello = "foo";
[33m[stage-2] [test-1.lox] [0m    print hello;
[33m[stage-2] [test-1.lox] [0m}
[33m[stage-2] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mfoo
[33m[stage-2] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-2] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[stage-2] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-2] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-2] [test-2.lox] [0m// This program tests that blocks can be used to group statements and variables
[33m[stage-2] [test-2.lox] [0m// creating local scopes
[33m[stage-2] [test-2.lox] [0m{
[33m[stage-2] [test-2.lox] [0m    var world = "before";
[33m[stage-2] [test-2.lox] [0m    print world;
[33m[stage-2] [test-2.lox] [0m}
[33m[stage-2] [test-2.lox] [0m{
[33m[stage-2] [test-2.lox] [0m    var world = "after";
[33m[stage-2] [test-2.lox] [0m    print world;
[33m[stage-2] [test-2.lox] [0m}
[33m[stage-2] [test-2.lox] [0m
[33m[stage-2] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mbefore
[33m[your_program] [0mafter
[33m[stage-2] [test-2] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[stage-2] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[stage-2] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-2] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-2] [test-3.lox] [0m// This program tests that scopes can be nested
[33m[stage-2] [test-3.lox] [0m{
[33m[stage-2] [test-3.lox] [0m    var bar = 35;
[33m[stage-2] [test-3.lox] [0m    {
[33m[stage-2] [test-3.lox] [0m        var quz = 35;
[33m[stage-2] [test-3.lox] [0m        print quz;
[33m[stage-2] [test-3.lox] [0m    }
[33m[stage-2] [test-3.lox] [0m    print bar;
[33m[stage-2] [test-3.lox] [0m}
[33m[stage-2] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m35
[33m[your_program] [0m35
[33m[stage-2] [test-3] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[stage-2] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[stage-2] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-2] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-2] [test-4.lox] [0m// This program tests that scopes are properly closed
[33m[stage-2] [test-4.lox] [0m// Here the inner scope is missing a closing curly brace
[33m[stage-2] [test-4.lox] [0m// Which leads to a compilation error
[33m[stage-2] [test-4.lox] [0m{
[33m[stage-2] [test-4.lox] [0m    var world = 68;
[33m[stage-2] [test-4.lox] [0m    var hello = 68;
[33m[stage-2] [test-4.lox] [0m    {
[33m[stage-2] [test-4.lox] [0m        print world + hello;
[33m[stage-2] [test-4.lox] [0m}
[33m[stage-2] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 9] Error at end: Expect '}' after block.
[33m[stage-2] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[stage-2] [test-4] [0m[92m✓ Received exit code 65.[0m
[33m[stage-2] [0m[92mTest passed.[0m

[33m[stage-1] [0m[94mRunning tests for Stage #1: fb4[0m
[33m[stage-1] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-1] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-1] [test-1.lox] [0m// This program tests that nested scopes can be created
[33m[stage-1] [test-1.lox] [0m// and that local variables can be accessed
[33m[stage-1] [test-1.lox] [0mvar hello = (12 * 41) - 84;
[33m[stage-1] [test-1.lox] [0m{
[33m[stage-1] [test-1.lox] [0m    var quz = "bar" + "14";
[33m[stage-1] [test-1.lox] [0m    print quz;
[33m[stage-1] [test-1.lox] [0m}
[33m[stage-1] [test-1.lox] [0mprint hello;
[33m[stage-1] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mbar14
[33m[your_program] [0m408
[33m[stage-1] [test-1] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[stage-1] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[stage-1] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-1] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-1] [test-2.lox] [0m// This program tests variable shadowing across nested scopes
[33m[stage-1] [test-2.lox] [0m{
[33m[stage-1] [test-2.lox] [0m    var foo = "before";
[33m[stage-1] [test-2.lox] [0m    {
[33m[stage-1] [test-2.lox] [0m        var foo = "after";
[33m[stage-1] [test-2.lox] [0m        print foo;
[33m[stage-1] [test-2.lox] [0m    }
[33m[stage-1] [test-2.lox] [0m    print foo;
[33m[stage-1] [test-2.lox] [0m}
[33m[stage-1] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mafter
[33m[your_program] [0mbefore
[33m[stage-1] [test-2] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[stage-1] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[stage-1] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-1] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-1] [test-3.lox] [0m// This program creates nested scopes and tests local scopes and variable shadowing
[33m[stage-1] [test-3.lox] [0mvar baz = "global baz";
[33m[stage-1] [test-3.lox] [0mvar bar = "global bar";
[33m[stage-1] [test-3.lox] [0mvar hello = "global hello";
[33m[stage-1] [test-3.lox] [0m{
[33m[stage-1] [test-3.lox] [0m  var baz = "outer baz";
[33m[stage-1] [test-3.lox] [0m  var bar = "outer bar";
[33m[stage-1] [test-3.lox] [0m  {
[33m[stage-1] [test-3.lox] [0m    var baz = "inner baz";
[33m[stage-1] [test-3.lox] [0m    print baz;
[33m[stage-1] [test-3.lox] [0m    print bar;
[33m[stage-1] [test-3.lox] [0m    print hello;
[33m[stage-1] [test-3.lox] [0m  }
[33m[stage-1] [test-3.lox] [0m  print baz;
[33m[stage-1] [test-3.lox] [0m  print bar;
[33m[stage-1] [test-3.lox] [0m  print hello;
[33m[stage-1] [test-3.lox] [0m}
[33m[stage-1] [test-3.lox] [0mprint baz;
[33m[stage-1] [test-3.lox] [0mprint bar;
[33m[stage-1] [test-3.lox] [0mprint hello;
[33m[stage-1] [test-3.lox] [0m
[33m[stage-1] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0minner baz
[33m[your_program] [0mouter bar
[33m[your_program] [0mglobal hello
[33m[your_program] [0mouter baz
[33m[your_program] [0mouter bar
[33m[your_program] [0mglobal hello
[33m[your_program] [0mglobal baz
[33m[your_program] [0mglobal bar
[33m[your_program] [0mglobal hello
[33m[stage-1] [test-3] [0m[92m✓ 9 line(s) match on stdout[0m
[33m[stage-1] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[stage-1] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-1] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-1] [test-4.lox] [0m// This program tests that when a variable is declared in an outer scope,
[33m[stage-1] [test-4.lox] [0m// it can be used in an inner scope
[33m[stage-1] [test-4.lox] [0m// But when a variable is declared in an inner scope,
[33m[stage-1] [test-4.lox] [0m// it can't be used in an outer scope
[33m[stage-1] [test-4.lox] [0m{
[33m[stage-1] [test-4.lox] [0m  var foo = "outer foo";
[33m[stage-1] [test-4.lox] [0m  var baz = "outer baz";
[33m[stage-1] [test-4.lox] [0m  {
[33m[stage-1] [test-4.lox] [0m    foo = "modified foo";
[33m[stage-1] [test-4.lox] [0m    var baz = "inner baz";
[33m[stage-1] [test-4.lox] [0m    print foo;
[33m[stage-1] [test-4.lox] [0m    print baz;
[33m[stage-1] [test-4.lox] [0m  }
[33m[stage-1] [test-4.lox] [0m  print foo;
[33m[stage-1] [test-4.lox] [0m  print baz;
[33m[stage-1] [test-4.lox] [0m}
[33m[stage-1] [test-4.lox] [0mprint baz;
[33m[stage-1] [test-4.lox] [0m
[33m[stage-1] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mmodified foo
[33m[your_program] [0minner baz
[33m[your_program] [0mmodified foo
[33m[your_program] [0mouter baz
[33m[your_program] [0mUndefined variable 'baz'.
[33m[your_program] [0m[line 17]
[33m[stage-1] [test-4] [0m[92m✓ 4 line(s) match on stdout[0m
[33m[stage-1] [test-4] [0m[92m✓ Received exit code 70.[0m
[33m[stage-1] [0m[92mTest passed.[0m
