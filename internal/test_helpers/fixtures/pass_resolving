Debug = true

[33m[stage-5] [0m[94mRunning tests for Stage #5: r1[0m
[33m[stage-5] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-5] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-5] [test-1] [0m[33m[test.lox][0m var variable = "global";
[33m[stage-5] [test-1] [0m[33m[test.lox][0m {
[33m[stage-5] [test-1] [0m[33m[test.lox][0m   fun f() {
[33m[stage-5] [test-1] [0m[33m[test.lox][0m     print variable;
[33m[stage-5] [test-1] [0m[33m[test.lox][0m   }
[33m[stage-5] [test-1] [0m[33m[test.lox][0m 
[33m[stage-5] [test-1] [0m[33m[test.lox][0m   f(); // expect: global
[33m[stage-5] [test-1] [0m[33m[test.lox][0m   var variable = "local";
[33m[stage-5] [test-1] [0m[33m[test.lox][0m   f(); // expect: global
[33m[stage-5] [test-1] [0m[33m[test.lox][0m }
[33m[stage-5] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mglobal
[33m[your_program] [0mglobal
[33m[stage-5] [test-1] [0m[92mâœ“ 2 line(s) match on stdout[0m
[33m[stage-5] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-5] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-5] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-5] [test-2] [0m[33m[test.lox][0m fun global() {
[33m[stage-5] [test-2] [0m[33m[test.lox][0m   print "global";
[33m[stage-5] [test-2] [0m[33m[test.lox][0m }
[33m[stage-5] [test-2] [0m[33m[test.lox][0m 
[33m[stage-5] [test-2] [0m[33m[test.lox][0m {
[33m[stage-5] [test-2] [0m[33m[test.lox][0m   fun f() {
[33m[stage-5] [test-2] [0m[33m[test.lox][0m     global();
[33m[stage-5] [test-2] [0m[33m[test.lox][0m   }
[33m[stage-5] [test-2] [0m[33m[test.lox][0m 
[33m[stage-5] [test-2] [0m[33m[test.lox][0m   f();
[33m[stage-5] [test-2] [0m[33m[test.lox][0m   fun global() {
[33m[stage-5] [test-2] [0m[33m[test.lox][0m     print "local";
[33m[stage-5] [test-2] [0m[33m[test.lox][0m   }
[33m[stage-5] [test-2] [0m[33m[test.lox][0m   f();
[33m[stage-5] [test-2] [0m[33m[test.lox][0m }
[33m[stage-5] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mglobal
[33m[your_program] [0mglobal
[33m[stage-5] [test-2] [0m[92mâœ“ 2 line(s) match on stdout[0m
[33m[stage-5] [test-2] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-5] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-5] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-5] [test-3] [0m[33m[test.lox][0m // Multiple Nested Functions with Shadowing
[33m[stage-5] [test-3] [0m[33m[test.lox][0m var x = "global";
[33m[stage-5] [test-3] [0m[33m[test.lox][0m 
[33m[stage-5] [test-3] [0m[33m[test.lox][0m fun outer() {
[33m[stage-5] [test-3] [0m[33m[test.lox][0m   var x = "outer";
[33m[stage-5] [test-3] [0m[33m[test.lox][0m 
[33m[stage-5] [test-3] [0m[33m[test.lox][0m   fun middle() {
[33m[stage-5] [test-3] [0m[33m[test.lox][0m     fun inner() {
[33m[stage-5] [test-3] [0m[33m[test.lox][0m       print x; // Should capture "outer", not "global"
[33m[stage-5] [test-3] [0m[33m[test.lox][0m     }
[33m[stage-5] [test-3] [0m[33m[test.lox][0m 
[33m[stage-5] [test-3] [0m[33m[test.lox][0m     inner();
[33m[stage-5] [test-3] [0m[33m[test.lox][0m     var x = "middle";
[33m[stage-5] [test-3] [0m[33m[test.lox][0m     inner(); // Should still print "outer"
[33m[stage-5] [test-3] [0m[33m[test.lox][0m   }
[33m[stage-5] [test-3] [0m[33m[test.lox][0m 
[33m[stage-5] [test-3] [0m[33m[test.lox][0m   middle();
[33m[stage-5] [test-3] [0m[33m[test.lox][0m }
[33m[stage-5] [test-3] [0m[33m[test.lox][0m 
[33m[stage-5] [test-3] [0m[33m[test.lox][0m outer();
[33m[stage-5] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mouter
[33m[your_program] [0mouter
[33m[stage-5] [test-3] [0m[92mâœ“ 2 line(s) match on stdout[0m
[33m[stage-5] [test-3] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-5] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-5] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-5] [test-4] [0m[33m[test.lox][0m // Function Returning a Function
[33m[stage-5] [test-4] [0m[33m[test.lox][0m var count = 0;
[33m[stage-5] [test-4] [0m[33m[test.lox][0m 
[33m[stage-5] [test-4] [0m[33m[test.lox][0m {
[33m[stage-5] [test-4] [0m[33m[test.lox][0m   fun makeCounter() {
[33m[stage-5] [test-4] [0m[33m[test.lox][0m     fun counter() {
[33m[stage-5] [test-4] [0m[33m[test.lox][0m       count = count + 1;
[33m[stage-5] [test-4] [0m[33m[test.lox][0m       print count;
[33m[stage-5] [test-4] [0m[33m[test.lox][0m     }
[33m[stage-5] [test-4] [0m[33m[test.lox][0m     return counter;
[33m[stage-5] [test-4] [0m[33m[test.lox][0m   }
[33m[stage-5] [test-4] [0m[33m[test.lox][0m 
[33m[stage-5] [test-4] [0m[33m[test.lox][0m   var counter1 = makeCounter();
[33m[stage-5] [test-4] [0m[33m[test.lox][0m   counter1(); // Should print 1
[33m[stage-5] [test-4] [0m[33m[test.lox][0m   counter1(); // Should print 2
[33m[stage-5] [test-4] [0m[33m[test.lox][0m 
[33m[stage-5] [test-4] [0m[33m[test.lox][0m   var count = 0; // This local variable shouldn't affect our counter
[33m[stage-5] [test-4] [0m[33m[test.lox][0m   counter1(); // Should print 3
[33m[stage-5] [test-4] [0m[33m[test.lox][0m }
[33m[stage-5] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m1
[33m[your_program] [0m2
[33m[your_program] [0m3
[33m[stage-5] [test-4] [0m[92mâœ“ 3 line(s) match on stdout[0m
[33m[stage-5] [test-4] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-5] [0m[92mTest passed.[0m

[33m[stage-4] [0m[94mRunning tests for Stage #4: r4[0m
[33m[stage-4] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-4] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-4] [test-1] [0m[33m[test.lox][0m var a = "value";
[33m[stage-4] [test-1] [0m[33m[test.lox][0m var a = a; // global scope, so this is allowed
[33m[stage-4] [test-1] [0m[33m[test.lox][0m print a; // expect: value
[33m[stage-4] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mvalue
[33m[stage-4] [test-1] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-4] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-4] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-4] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-4] [test-2] [0m[33m[test.lox][0m var a = "outer";
[33m[stage-4] [test-2] [0m[33m[test.lox][0m {
[33m[stage-4] [test-2] [0m[33m[test.lox][0m   var a = a; // Error at 'a': Can't read local variable in its own initializer.
[33m[stage-4] [test-2] [0m[33m[test.lox][0m }
[33m[stage-4] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 3] Error at 'a': Can't read local variable in its own initializer.
[33m[stage-4] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-4] [test-2] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-4] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-4] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-4] [test-3] [0m[33m[test.lox][0m fun returnArg(arg) {
[33m[stage-4] [test-3] [0m[33m[test.lox][0m   return arg;
[33m[stage-4] [test-3] [0m[33m[test.lox][0m }
[33m[stage-4] [test-3] [0m[33m[test.lox][0m 
[33m[stage-4] [test-3] [0m[33m[test.lox][0m var b = "global";
[33m[stage-4] [test-3] [0m[33m[test.lox][0m 
[33m[stage-4] [test-3] [0m[33m[test.lox][0m {
[33m[stage-4] [test-3] [0m[33m[test.lox][0m   var a = "first";
[33m[stage-4] [test-3] [0m[33m[test.lox][0m   var b = returnArg(b); // Using global 'b' in its initializer, but through a function call
[33m[stage-4] [test-3] [0m[33m[test.lox][0m   print b;
[33m[stage-4] [test-3] [0m[33m[test.lox][0m }
[33m[stage-4] [test-3] [0m[33m[test.lox][0m 
[33m[stage-4] [test-3] [0m[33m[test.lox][0m // Reassigning with self-reference is fine for globals
[33m[stage-4] [test-3] [0m[33m[test.lox][0m var b = b + " updated";
[33m[stage-4] [test-3] [0m[33m[test.lox][0m print b;
[33m[stage-4] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 9] Error at 'b': Can't read local variable in its own initializer.
[33m[stage-4] [test-3] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-4] [test-3] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-4] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-4] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-4] [test-4] [0m[33m[test.lox][0m fun outer() {
[33m[stage-4] [test-4] [0m[33m[test.lox][0m   var a = "outer";
[33m[stage-4] [test-4] [0m[33m[test.lox][0m 
[33m[stage-4] [test-4] [0m[33m[test.lox][0m   fun inner() {
[33m[stage-4] [test-4] [0m[33m[test.lox][0m     var a = a; // Error at 'a': Can't read local variable in its own initializer.
[33m[stage-4] [test-4] [0m[33m[test.lox][0m     print a;
[33m[stage-4] [test-4] [0m[33m[test.lox][0m   }
[33m[stage-4] [test-4] [0m[33m[test.lox][0m 
[33m[stage-4] [test-4] [0m[33m[test.lox][0m   inner();
[33m[stage-4] [test-4] [0m[33m[test.lox][0m }
[33m[stage-4] [test-4] [0m[33m[test.lox][0m 
[33m[stage-4] [test-4] [0m[33m[test.lox][0m outer();
[33m[stage-4] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 5] Error at 'a': Can't read local variable in its own initializer.
[33m[stage-4] [test-4] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-4] [test-4] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-4] [0m[92mTest passed.[0m

[33m[stage-3] [0m[94mRunning tests for Stage #3: r5[0m
[33m[stage-3] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-3] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-3] [test-1] [0m[33m[test.lox][0m fun foo() {
[33m[stage-3] [test-1] [0m[33m[test.lox][0m   return "at function scope is ok";
[33m[stage-3] [test-1] [0m[33m[test.lox][0m }
[33m[stage-3] [test-1] [0m[33m[test.lox][0m 
[33m[stage-3] [test-1] [0m[33m[test.lox][0m return; // Error: Can't return from top-level code.
[33m[stage-3] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 5] Error at 'return': Can't return from top-level code.
[33m[stage-3] [test-1] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-3] [test-1] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-3] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-3] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-3] [test-2] [0m[33m[test.lox][0m fun foo() {
[33m[stage-3] [test-2] [0m[33m[test.lox][0m   if (true) {
[33m[stage-3] [test-2] [0m[33m[test.lox][0m     // Return inside nested blocks in a function is fine
[33m[stage-3] [test-2] [0m[33m[test.lox][0m     return "early return";
[33m[stage-3] [test-2] [0m[33m[test.lox][0m   }
[33m[stage-3] [test-2] [0m[33m[test.lox][0m 
[33m[stage-3] [test-2] [0m[33m[test.lox][0m   for (var i = 0; i < 10; i = i + 1) {
[33m[stage-3] [test-2] [0m[33m[test.lox][0m     // Return inside loops in a function is fine too
[33m[stage-3] [test-2] [0m[33m[test.lox][0m     return "loop return";
[33m[stage-3] [test-2] [0m[33m[test.lox][0m   }
[33m[stage-3] [test-2] [0m[33m[test.lox][0m }
[33m[stage-3] [test-2] [0m[33m[test.lox][0m 
[33m[stage-3] [test-2] [0m[33m[test.lox][0m // But this is still an error
[33m[stage-3] [test-2] [0m[33m[test.lox][0m if (true) {
[33m[stage-3] [test-2] [0m[33m[test.lox][0m   return "conditional return"; // Error: Can't return from top-level code.
[33m[stage-3] [test-2] [0m[33m[test.lox][0m }
[33m[stage-3] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 15] Error at 'return': Can't return from top-level code.
[33m[stage-3] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-3] [test-2] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-3] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-3] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-3] [test-3] [0m[33m[test.lox][0m {
[33m[stage-3] [test-3] [0m[33m[test.lox][0m   return "not allowed in a block either"; // Error: Can't return from top-level code.
[33m[stage-3] [test-3] [0m[33m[test.lox][0m }
[33m[stage-3] [test-3] [0m[33m[test.lox][0m 
[33m[stage-3] [test-3] [0m[33m[test.lox][0m fun allowed() {
[33m[stage-3] [test-3] [0m[33m[test.lox][0m   if (true) {
[33m[stage-3] [test-3] [0m[33m[test.lox][0m     return "this is fine"; // This is ok
[33m[stage-3] [test-3] [0m[33m[test.lox][0m   }
[33m[stage-3] [test-3] [0m[33m[test.lox][0m   return; // This is also ok
[33m[stage-3] [test-3] [0m[33m[test.lox][0m }
[33m[stage-3] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 2] Error at 'return': Can't return from top-level code.
[33m[stage-3] [test-3] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-3] [test-3] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-3] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-3] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-3] [test-4] [0m[33m[test.lox][0m fun outer() {
[33m[stage-3] [test-4] [0m[33m[test.lox][0m   fun inner() {
[33m[stage-3] [test-4] [0m[33m[test.lox][0m     return "ok";
[33m[stage-3] [test-4] [0m[33m[test.lox][0m   }
[33m[stage-3] [test-4] [0m[33m[test.lox][0m 
[33m[stage-3] [test-4] [0m[33m[test.lox][0m   return "also ok";
[33m[stage-3] [test-4] [0m[33m[test.lox][0m }
[33m[stage-3] [test-4] [0m[33m[test.lox][0m 
[33m[stage-3] [test-4] [0m[33m[test.lox][0m if (true) {
[33m[stage-3] [test-4] [0m[33m[test.lox][0m   fun nested() {
[33m[stage-3] [test-4] [0m[33m[test.lox][0m     return; // This is fine
[33m[stage-3] [test-4] [0m[33m[test.lox][0m   }
[33m[stage-3] [test-4] [0m[33m[test.lox][0m 
[33m[stage-3] [test-4] [0m[33m[test.lox][0m   return "not ok"; // Error: Can't return from top-level code.
[33m[stage-3] [test-4] [0m[33m[test.lox][0m }
[33m[stage-3] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 14] Error at 'return': Can't return from top-level code.
[33m[stage-3] [test-4] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-3] [test-4] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-3] [0m[92mTest passed.[0m

[33m[stage-2] [0m[94mRunning tests for Stage #2: r6[0m
[33m[stage-2] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-2] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-2] [test-1] [0m[33m[test.lox][0m if (false) {
[33m[stage-2] [test-1] [0m[33m[test.lox][0m   print notDefined;
[33m[stage-2] [test-1] [0m[33m[test.lox][0m }
[33m[stage-2] [test-1] [0m[33m[test.lox][0m 
[33m[stage-2] [test-1] [0m[33m[test.lox][0m print "ok"; // expect: ok
[33m[stage-2] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mok
[33m[stage-2] [test-1] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-2] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-2] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-2] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-2] [test-2] [0m[33m[test.lox][0m print a; // expect: runtime error
[33m[stage-2] [test-2] [0m[33m[test.lox][0m var a = "value";
[33m[stage-2] [test-2] [0m[33m[test.lox][0m print a; // expect: value
[33m[stage-2] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mUndefined variable 'a'.
[33m[your_program] [0m[line 1]
[33m[stage-2] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-2] [test-2] [0m[92mâœ“ Received exit code 70.[0m
[33m[stage-2] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-2] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-2] [test-3] [0m[33m[test.lox][0m fun callUndefined() {
[33m[stage-2] [test-3] [0m[33m[test.lox][0m   print notDefined; // expect: runtime error
[33m[stage-2] [test-3] [0m[33m[test.lox][0m }
[33m[stage-2] [test-3] [0m[33m[test.lox][0m 
[33m[stage-2] [test-3] [0m[33m[test.lox][0m if (true) {
[33m[stage-2] [test-3] [0m[33m[test.lox][0m   callUndefined();
[33m[stage-2] [test-3] [0m[33m[test.lox][0m }
[33m[stage-2] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mUndefined variable 'notDefined'.
[33m[your_program] [0m[line 2]
[33m[stage-2] [test-3] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-2] [test-3] [0m[92mâœ“ Received exit code 70.[0m
[33m[stage-2] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-2] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-2] [test-4] [0m[33m[test.lox][0m var cond = false;
[33m[stage-2] [test-4] [0m[33m[test.lox][0m 
[33m[stage-2] [test-4] [0m[33m[test.lox][0m fun getUndefined() {
[33m[stage-2] [test-4] [0m[33m[test.lox][0m   if (cond) {
[33m[stage-2] [test-4] [0m[33m[test.lox][0m     return undefined;
[33m[stage-2] [test-4] [0m[33m[test.lox][0m   }
[33m[stage-2] [test-4] [0m[33m[test.lox][0m   return "ok";
[33m[stage-2] [test-4] [0m[33m[test.lox][0m }
[33m[stage-2] [test-4] [0m[33m[test.lox][0m 
[33m[stage-2] [test-4] [0m[33m[test.lox][0m print getUndefined();
[33m[stage-2] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mok
[33m[stage-2] [test-4] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-2] [test-4] [0m[92mâœ“ Received exit code 0.[0m
[33m[stage-2] [0m[92mTest passed.[0m

[33m[stage-1] [0m[94mRunning tests for Stage #1: r7[0m
[33m[stage-1] [test-1] [0m[94mRunning test case: 1[0m
[33m[stage-1] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-1] [test-1] [0m[33m[test.lox][0m {
[33m[stage-1] [test-1] [0m[33m[test.lox][0m   var a = "value";
[33m[stage-1] [test-1] [0m[33m[test.lox][0m   var a = "other"; // Error at 'a': Already a variable with this name in this scope.
[33m[stage-1] [test-1] [0m[33m[test.lox][0m }
[33m[stage-1] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 3] Error at 'a': Already a variable with this name in this scope.
[33m[stage-1] [test-1] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-1] [test-1] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-1] [test-2] [0m[94mRunning test case: 2[0m
[33m[stage-1] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-1] [test-2] [0m[33m[test.lox][0m fun foo(a) {
[33m[stage-1] [test-2] [0m[33m[test.lox][0m   var a; // Error at 'a': Already a variable with this name in this scope.
[33m[stage-1] [test-2] [0m[33m[test.lox][0m }
[33m[stage-1] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 2] Error at 'a': Already a variable with this name in this scope.
[33m[stage-1] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-1] [test-2] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-1] [test-3] [0m[94mRunning test case: 3[0m
[33m[stage-1] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-1] [test-3] [0m[33m[test.lox][0m fun foo(arg, arg) { // Error at 'arg': Already a variable with this name in this scope.
[33m[stage-1] [test-3] [0m[33m[test.lox][0m   "body";
[33m[stage-1] [test-3] [0m[33m[test.lox][0m }
[33m[stage-1] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 1] Error at 'arg': Already a variable with this name in this scope.
[33m[stage-1] [test-3] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-1] [test-3] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-1] [test-4] [0m[94mRunning test case: 4[0m
[33m[stage-1] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[stage-1] [test-4] [0m[33m[test.lox][0m var a = "1";
[33m[stage-1] [test-4] [0m[33m[test.lox][0m print a; // expect: 1
[33m[stage-1] [test-4] [0m[33m[test.lox][0m var a;
[33m[stage-1] [test-4] [0m[33m[test.lox][0m print a; // expect: nil
[33m[stage-1] [test-4] [0m[33m[test.lox][0m var a = "2";
[33m[stage-1] [test-4] [0m[33m[test.lox][0m print a; // expect: 2
[33m[stage-1] [test-4] [0m[33m[test.lox][0m 
[33m[stage-1] [test-4] [0m[33m[test.lox][0m {
[33m[stage-1] [test-4] [0m[33m[test.lox][0m   var a = "1";
[33m[stage-1] [test-4] [0m[33m[test.lox][0m   var a = "2"; // Error at 'a': Already a variable with this name in this scope.
[33m[stage-1] [test-4] [0m[33m[test.lox][0m   print a;
[33m[stage-1] [test-4] [0m[33m[test.lox][0m }
[33m[stage-1] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 10] Error at 'a': Already a variable with this name in this scope.
[33m[stage-1] [test-4] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[stage-1] [test-4] [0m[92mâœ“ Received exit code 65.[0m
[33m[stage-1] [0m[92mTest passed.[0m
